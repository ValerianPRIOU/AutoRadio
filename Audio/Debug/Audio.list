
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007950  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd8  08007dd8  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd8  08007dd8  00008dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de0  08007de0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00008de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007de4  08007de4  00008de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007de8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001540  20000074  08007e5c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  08007e5c  000095b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cc2  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b0  00000000  00000000  0001cd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00020418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce7  00000000  00000000  00021518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e8b  00000000  00000000  000221ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001406b  00000000  00000000  0004b08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2986  00000000  00000000  0005f0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151a7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  00151ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00156864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ac8 	.word	0x08007ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007ac8 	.word	0x08007ac8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	200000e8 	.word	0x200000e8

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f8d6 	bl	8004762 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08007aec 	.word	0x08007aec
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f910 	bl	80047fa <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f927 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xc8>)
 8000676:	f000 ff6f 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 ff60 	bl	8001558 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <__io_putchar+0x20>)
 80006ba:	f002 fc97 	bl	8002fec <HAL_UART_Transmit>
	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000378 	.word	0x20000378

080006cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <HAL_UART_RxCpltCallback+0x20>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
 80006de:	f000 fb55 	bl	8000d8c <shell_uart_receive_irq_cb>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40004400 	.word	0x40004400

080006f0 <fonction>:

int fonction(int argc, char ** argv)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 80006fa:	4810      	ldr	r0, [pc, #64]	@ (800073c <fonction+0x4c>)
 80006fc:	f006 f996 	bl	8006a2c <puts>

	printf("argc = %d\r\n", argc);
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	480f      	ldr	r0, [pc, #60]	@ (8000740 <fonction+0x50>)
 8000704:	f006 f92a 	bl	800695c <iprintf>

	for (int i = 0 ; i < argc ; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00c      	b.n	8000728 <fonction+0x38>
	{
		printf("arg %d = %s\r\n", i, argv[i]);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	68f9      	ldr	r1, [r7, #12]
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <fonction+0x54>)
 800071e:	f006 f91d 	bl	800695c <iprintf>
	for (int i = 0 ; i < argc ; i++)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbee      	blt.n	800070e <fonction+0x1e>
	}

	return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08007b08 	.word	0x08007b08
 8000740:	08007b24 	.word	0x08007b24
 8000744:	08007b30 	.word	0x08007b30

08000748 <addition>:

int addition(int argc, char ** argv)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	if (argc == 3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d117      	bne.n	8000788 <addition+0x40>
	{
		int a, b;
		a = atoi(argv[1]);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f005 ffb2 	bl	80066c8 <atoi>
 8000764:	60f8      	str	r0, [r7, #12]
		b = atoi(argv[2]);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3308      	adds	r3, #8
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f005 ffab 	bl	80066c8 <atoi>
 8000772:	60b8      	str	r0, [r7, #8]
		printf("%d + %d = %d\r\n", a, b, a+b);
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4413      	add	r3, r2
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <addition+0x54>)
 8000780:	f006 f8ec 	bl	800695c <iprintf>

		return 0;
 8000784:	2300      	movs	r3, #0
 8000786:	e004      	b.n	8000792 <addition+0x4a>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <addition+0x58>)
 800078a:	f006 f94f 	bl	8006a2c <puts>
		return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 8000792:	4618      	mov	r0, r3
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08007b40 	.word	0x08007b40
 80007a0:	08007b50 	.word	0x08007b50

080007a4 <task_shell>:

void task_shell(void * unused)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	shell_init();
 80007ac:	f000 fb7a 	bl	8000ea4 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80007b0:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <task_shell+0x2c>)
 80007b2:	4908      	ldr	r1, [pc, #32]	@ (80007d4 <task_shell+0x30>)
 80007b4:	2066      	movs	r0, #102	@ 0x66
 80007b6:	f000 fbad 	bl	8000f14 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 80007ba:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <task_shell+0x34>)
 80007bc:	4907      	ldr	r1, [pc, #28]	@ (80007dc <task_shell+0x38>)
 80007be:	2061      	movs	r0, #97	@ 0x61
 80007c0:	f000 fba8 	bl	8000f14 <shell_add>
	shell_run();	// boucle infinie
 80007c4:	f000 fc52 	bl	800106c <shell_run>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08007b78 	.word	0x08007b78
 80007d4:	080006f1 	.word	0x080006f1
 80007d8:	08007b90 	.word	0x08007b90
 80007dc:	08000749 	.word	0x08000749

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fcab 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f833 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f7ff fef5 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f2:	f000 f9c7 	bl	8000b84 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007f6:	f000 f995 	bl	8000b24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("===== Audio ===== \r\n");
 80007fa:	4811      	ldr	r0, [pc, #68]	@ (8000840 <main+0x60>)
 80007fc:	f006 f916 	bl	8006a2c <puts>
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000800:	2120      	movs	r1, #32
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	f001 f869 	bl	80018dc <HAL_GPIO_TogglePin>

	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <main+0x64>)
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	2301      	movs	r3, #1
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000818:	490b      	ldr	r1, [pc, #44]	@ (8000848 <main+0x68>)
 800081a:	480c      	ldr	r0, [pc, #48]	@ (800084c <main+0x6c>)
 800081c:	f004 fbfa 	bl	8005014 <xTaskCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d004      	beq.n	8000830 <main+0x50>
	{
		printf("Error creating task shell\r\n");
 8000826:	480a      	ldr	r0, [pc, #40]	@ (8000850 <main+0x70>)
 8000828:	f006 f900 	bl	8006a2c <puts>
		Error_Handler();
 800082c:	f000 f863 	bl	80008f6 <Error_Handler>
	}

	vTaskStartScheduler();
 8000830:	f004 fd5e 	bl	80052f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000834:	f7ff feae 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000838:	f003 ff8c 	bl	8004754 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <main+0x5c>
 8000840:	08007ba4 	.word	0x08007ba4
 8000844:	200002e8 	.word	0x200002e8
 8000848:	08007bb8 	.word	0x08007bb8
 800084c:	080007a5 	.word	0x080007a5
 8000850:	08007bc0 	.word	0x08007bc0

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2244      	movs	r2, #68	@ 0x44
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f006 f9f6 	bl	8006c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000876:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800087a:	f001 f857 	bl	800192c <HAL_PWREx_ControlVoltageScaling>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000884:	f000 f837 	bl	80008f6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000892:	2310      	movs	r3, #16
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008a2:	230a      	movs	r3, #10
 80008a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 f88e 	bl	80019d8 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008c2:	f000 f818 	bl	80008f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2303      	movs	r3, #3
 80008cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fc56 	bl	8002190 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ea:	f000 f804 	bl	80008f6 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	@ 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fa:	b672      	cpsid	i
}
 80008fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	bf00      	nop
 8000900:	e7fd      	b.n	80008fe <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <HAL_MspInit+0x4c>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090e:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <HAL_MspInit+0x4c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	@ 0x60
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <HAL_MspInit+0x4c>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_MspInit+0x4c>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	@ 0x58
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <HAL_MspInit+0x4c>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 fd54 	bl	80013ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 fc33 	bl	80011f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000992:	f005 f8b7 	bl	8005b04 <xTaskGetSchedulerState>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d001      	beq.n	80009a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800099c:	f005 fc14 	bl	80061c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <USART1_IRQHandler+0x10>)
 80009aa:	f002 fbf5 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002f0 	.word	0x200002f0

080009b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
  }

  return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e009      	b.n	8000a18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe4b 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf1      	blt.n	8000a04 <_write+0x12>
  }
  return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_close>:

int _close(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a52:	605a      	str	r2, [r3, #4]
  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_isatty>:

int _isatty(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f006 f914 	bl	8006cf0 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20018000 	.word	0x20018000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200002ec 	.word	0x200002ec
 8000afc:	200015b8 	.word	0x200015b8

08000b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <MX_USART1_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b68:	f002 f9f2 	bl	8002f50 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f7ff fec0 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200002f0 	.word	0x200002f0
 8000b80:	40013800 	.word	0x40013800

08000b84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_USART2_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc8:	f002 f9c2 	bl	8002f50 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f7ff fe90 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000378 	.word	0x20000378
 8000be0:	40004400 	.word	0x40004400

08000be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ae      	sub	sp, #184	@ 0xb8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2288      	movs	r2, #136	@ 0x88
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 f825 	bl	8006c54 <memset>
  if(uartHandle->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a47      	ldr	r2, [pc, #284]	@ (8000d2c <HAL_UART_MspInit+0x148>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d145      	bne.n	8000ca0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fcd9 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff fe63 	bl	80008f6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c30:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c34:	4a3e      	ldr	r2, [pc, #248]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4c:	4a38      	ldr	r2, [pc, #224]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c54:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f000 fc65 	bl	8001558 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2105      	movs	r1, #5
 8000c92:	2025      	movs	r0, #37	@ 0x25
 8000c94:	f000 fbab 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c98:	2025      	movs	r0, #37	@ 0x25
 8000c9a:	f000 fbc4 	bl	8001426 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c9e:	e040      	b.n	8000d22 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <HAL_UART_MspInit+0x150>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d13b      	bne.n	8000d22 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fc8e 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000cc2:	f7ff fe18 	bl	80008f6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_UART_MspInit+0x14c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f000 fc1b 	bl	8001558 <HAL_GPIO_Init>
}
 8000d22:	bf00      	nop
 8000d24:	37b8      	adds	r7, #184	@ 0xb8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40004400 	.word	0x40004400

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d3c:	f7ff fee0 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f005 ffc9 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fd39 	bl	80007e0 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d7c:	08007de8 	.word	0x08007de8
  ldr r2, =_sbss
 8000d80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d84:	200015b4 	.word	0x200015b4

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <shell_uart_receive_irq_cb+0x38>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1d3a      	adds	r2, r7, #4
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 feb8 	bl	8004b14 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <shell_uart_receive_irq_cb+0x2e>
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <shell_uart_receive_irq_cb+0x3c>)
 8000dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	f3bf 8f4f 	dsb	sy
 8000db6:	f3bf 8f6f 	isb	sy
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000072c 	.word	0x2000072c
 8000dc8:	e000ed04 	.word	0xe000ed04

08000dcc <uart_read>:

static char uart_read() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <uart_read+0x2c>)
 8000dda:	f002 f991 	bl	8003100 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <uart_read+0x30>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 ff24 	bl	8004c34 <xQueueSemaphoreTake>

	return c;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200002f0 	.word	0x200002f0
 8000dfc:	2000072c 	.word	0x2000072c

08000e00 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <uart_write+0x24>)
 8000e16:	f002 f8e9 	bl	8002fec <HAL_UART_Transmit>
	return size;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200002f0 	.word	0x200002f0

08000e28 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	e022      	b.n	8000e7e <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000e38:	4916      	ldr	r1, [pc, #88]	@ (8000e94 <sh_help+0x6c>)
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4912      	ldr	r1, [pc, #72]	@ (8000e94 <sh_help+0x6c>)
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	3308      	adds	r3, #8
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <sh_help+0x70>)
 8000e62:	2128      	movs	r1, #40	@ 0x28
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <sh_help+0x74>)
 8000e66:	f005 fde9 	bl	8006a3c <sniprintf>
 8000e6a:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <sh_help+0x74>)
 8000e74:	f7ff ffc4 	bl	8000e00 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <sh_help+0x78>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbd7      	blt.n	8000e38 <sh_help+0x10>
	}

	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000404 	.word	0x20000404
 8000e98:	08007bdc 	.word	0x08007bdc
 8000e9c:	20000704 	.word	0x20000704
 8000ea0:	20000400 	.word	0x20000400

08000ea4 <shell_init>:

void shell_init() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	int size = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000eae:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <shell_init+0x58>)
 8000eb0:	2128      	movs	r1, #40	@ 0x28
 8000eb2:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <shell_init+0x5c>)
 8000eb4:	f005 fdc2 	bl	8006a3c <sniprintf>
 8000eb8:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480f      	ldr	r0, [pc, #60]	@ (8000f00 <shell_init+0x5c>)
 8000ec2:	f7ff ff9d 	bl	8000e00 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f003 fdc8 	bl	8004a60 <xQueueGenericCreate>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f04 <shell_init+0x60>)
 8000ed4:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <shell_init+0x60>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8000ede:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <shell_init+0x64>)
 8000ee0:	f005 fda4 	bl	8006a2c <puts>
		while(1);
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8000ee8:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <shell_init+0x68>)
 8000eea:	4909      	ldr	r1, [pc, #36]	@ (8000f10 <shell_init+0x6c>)
 8000eec:	2068      	movs	r0, #104	@ 0x68
 8000eee:	f000 f811 	bl	8000f14 <shell_add>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	08007be8 	.word	0x08007be8
 8000f00:	20000704 	.word	0x20000704
 8000f04:	2000072c 	.word	0x2000072c
 8000f08:	08007c10 	.word	0x08007c10
 8000f0c:	08007c28 	.word	0x08007c28
 8000f10:	08000e29 	.word	0x08000e29

08000f14 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <shell_add+0x74>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f28:	dc26      	bgt.n	8000f78 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <shell_add+0x74>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4917      	ldr	r1, [pc, #92]	@ (8000f8c <shell_add+0x78>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <shell_add+0x74>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4912      	ldr	r1, [pc, #72]	@ (8000f8c <shell_add+0x78>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3304      	adds	r3, #4
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <shell_add+0x74>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <shell_add+0x78>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	3308      	adds	r3, #8
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <shell_add+0x74>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <shell_add+0x74>)
 8000f72:	6013      	str	r3, [r2, #0]
		return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e001      	b.n	8000f7c <shell_add+0x68>
	}

	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	20000400 	.word	0x20000400
 8000f8c:	20000404 	.word	0x20000404

08000f90 <shell_exec>:

static int shell_exec(char * buf) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	@ 0x40
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fa4:	e040      	b.n	8001028 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8000fa6:	492d      	ldr	r1, [pc, #180]	@ (800105c <shell_exec+0xcc>)
 8000fa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d131      	bne.n	8001022 <shell_exec+0x92>
			argc = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fca:	e013      	b.n	8000ff4 <shell_exec+0x64>
				if(*p == ' ') {
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b20      	cmp	r3, #32
 8000fd2:	d10c      	bne.n	8000fee <shell_exec+0x5e>
					*p = '\0';
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000fe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	3340      	adds	r3, #64	@ 0x40
 8000fe8:	443b      	add	r3, r7
 8000fea:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <shell_exec+0x72>
 8000ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	dde4      	ble.n	8000fcc <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001002:	4916      	ldr	r1, [pc, #88]	@ (800105c <shell_exec+0xcc>)
 8001004:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3304      	adds	r3, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	4611      	mov	r1, r2
 800101a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800101c:	4798      	blx	r3
 800101e:	4603      	mov	r3, r0
 8001020:	e017      	b.n	8001052 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001024:	3301      	adds	r3, #1
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <shell_exec+0xd0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800102e:	429a      	cmp	r2, r3
 8001030:	dbb9      	blt.n	8000fa6 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001032:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <shell_exec+0xd4>)
 8001038:	2128      	movs	r1, #40	@ 0x28
 800103a:	480b      	ldr	r0, [pc, #44]	@ (8001068 <shell_exec+0xd8>)
 800103c:	f005 fcfe 	bl	8006a3c <sniprintf>
 8001040:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001044:	b29b      	uxth	r3, r3
 8001046:	4619      	mov	r1, r3
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <shell_exec+0xd8>)
 800104a:	f7ff fed9 	bl	8000e00 <uart_write>
	return -1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001052:	4618      	mov	r0, r3
 8001054:	3740      	adds	r7, #64	@ 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000404 	.word	0x20000404
 8001060:	20000400 	.word	0x20000400
 8001064:	08007c30 	.word	0x08007c30
 8001068:	20000704 	.word	0x20000704

0800106c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
	int reading = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800107a:	2102      	movs	r1, #2
 800107c:	482a      	ldr	r0, [pc, #168]	@ (8001128 <shell_run+0xbc>)
 800107e:	f7ff febf 	bl	8000e00 <uart_write>
		reading = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001086:	e047      	b.n	8001118 <shell_run+0xac>
			char c = uart_read();
 8001088:	f7ff fea0 	bl	8000dcc <uart_read>
 800108c:	4603      	mov	r3, r0
 800108e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b08      	cmp	r3, #8
 8001094:	d025      	beq.n	80010e2 <shell_run+0x76>
 8001096:	2b0d      	cmp	r3, #13
 8001098:	d12e      	bne.n	80010f8 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800109a:	4a24      	ldr	r2, [pc, #144]	@ (800112c <shell_run+0xc0>)
 800109c:	2128      	movs	r1, #40	@ 0x28
 800109e:	4824      	ldr	r0, [pc, #144]	@ (8001130 <shell_run+0xc4>)
 80010a0:	f005 fccc 	bl	8006a3c <sniprintf>
 80010a4:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	4820      	ldr	r0, [pc, #128]	@ (8001130 <shell_run+0xc4>)
 80010ae:	f7ff fea7 	bl	8000e00 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	60ba      	str	r2, [r7, #8]
 80010b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <shell_run+0xc8>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <shell_run+0xc8>)
 80010c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001138 <shell_run+0xcc>)
 80010c2:	2128      	movs	r1, #40	@ 0x28
 80010c4:	481a      	ldr	r0, [pc, #104]	@ (8001130 <shell_run+0xc4>)
 80010c6:	f005 fcb9 	bl	8006a3c <sniprintf>
 80010ca:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	4817      	ldr	r0, [pc, #92]	@ (8001130 <shell_run+0xc4>)
 80010d4:	f7ff fe94 	bl	8000e00 <uart_write>
				reading = 0;        //exit read loop
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
				break;
 80010e0:	e01a      	b.n	8001118 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd16      	ble.n	8001116 <shell_run+0xaa>
					pos--;          //remove it in buffer
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 80010ee:	2103      	movs	r1, #3
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <shell_run+0xd0>)
 80010f2:	f7ff fe85 	bl	8000e00 <uart_write>
				}
				break;
 80010f6:	e00e      	b.n	8001116 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b27      	cmp	r3, #39	@ 0x27
 80010fc:	dc0c      	bgt.n	8001118 <shell_run+0xac>
					uart_write(&c, 1);
 80010fe:	1cfb      	adds	r3, r7, #3
 8001100:	2101      	movs	r1, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe7c 	bl	8000e00 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	78f9      	ldrb	r1, [r7, #3]
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <shell_run+0xc8>)
 8001112:	54d1      	strb	r1, [r2, r3]
 8001114:	e000      	b.n	8001118 <shell_run+0xac>
				break;
 8001116:	bf00      	nop
		while(reading) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1b4      	bne.n	8001088 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <shell_run+0xc8>)
 8001120:	f7ff ff36 	bl	8000f90 <shell_exec>
		uart_write(prompt, 2);
 8001124:	e7a9      	b.n	800107a <shell_run+0xe>
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	08007c48 	.word	0x08007c48
 8001130:	20000704 	.word	0x20000704
 8001134:	20000730 	.word	0x20000730
 8001138:	08007c4c 	.word	0x08007c4c
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_Init+0x3c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_Init+0x3c>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001156:	2003      	movs	r0, #3
 8001158:	f000 f93e 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115c:	200f      	movs	r0, #15
 800115e:	f000 f80f 	bl	8001180 <HAL_InitTick>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	e001      	b.n	8001172 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116e:	f7ff fbc9 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001172:	79fb      	ldrb	r3, [r7, #7]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d023      	beq.n	80011dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_InitTick+0x70>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f949 	bl	8001442 <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d809      	bhi.n	80011d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c4:	f000 f913 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_InitTick+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e004      	b.n	80011e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e001      	b.n	80011e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000010 	.word	0x20000010
 80011f0:	20000000 	.word	0x20000000
 80011f4:	2000000c 	.word	0x2000000c

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000010 	.word	0x20000010
 800121c:	20000758 	.word	0x20000758

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000758 	.word	0x20000758

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	@ (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d008      	beq.n	8001484 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2204      	movs	r2, #4
 8001476:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e022      	b.n	80014ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 020e 	bic.w	r2, r2, #14
 8001492:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a8:	f003 021c 	and.w	r2, r3, #28
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d005      	beq.n	80014fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e029      	b.n	800154e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020e 	bic.w	r2, r2, #14
 8001508:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f003 021c 	and.w	r2, r3, #28
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
    }
  }
  return status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e17f      	b.n	8001868 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8171 	beq.w	8001862 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d005      	beq.n	8001598 <HAL_GPIO_Init+0x40>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 0201 	and.w	r2, r3, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b03      	cmp	r3, #3
 8001604:	d118      	bne.n	8001638 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80ac 	beq.w	8001862 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b5f      	ldr	r3, [pc, #380]	@ (8001888 <HAL_GPIO_Init+0x330>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	4a5e      	ldr	r2, [pc, #376]	@ (8001888 <HAL_GPIO_Init+0x330>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6613      	str	r3, [r2, #96]	@ 0x60
 8001716:	4b5c      	ldr	r3, [pc, #368]	@ (8001888 <HAL_GPIO_Init+0x330>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001722:	4a5a      	ldr	r2, [pc, #360]	@ (800188c <HAL_GPIO_Init+0x334>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x242>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	@ (8001890 <HAL_GPIO_Init+0x338>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x23e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	@ (8001894 <HAL_GPIO_Init+0x33c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x23a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	@ (8001898 <HAL_GPIO_Init+0x340>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x236>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	@ (800189c <HAL_GPIO_Init+0x344>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x232>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	@ (80018a0 <HAL_GPIO_Init+0x348>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x22e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	@ (80018a4 <HAL_GPIO_Init+0x34c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x22a>
 800177e:	2306      	movs	r3, #6
 8001780:	e00c      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001782:	2307      	movs	r3, #7
 8001784:	e00a      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001786:	2305      	movs	r3, #5
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x244>
 800178a:	2304      	movs	r3, #4
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x244>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x244>
 800179a:	2300      	movs	r3, #0
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ac:	4937      	ldr	r1, [pc, #220]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ba:	4b3b      	ldr	r3, [pc, #236]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017de:	4a32      	ldr	r2, [pc, #200]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e4:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001808:	4a27      	ldr	r2, [pc, #156]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800180e:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001832:	4a1d      	ldr	r2, [pc, #116]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800185c:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <HAL_GPIO_Init+0x350>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae78 	bne.w	8001568 <HAL_GPIO_Init+0x10>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48000c00 	.word	0x48000c00
 800189c:	48001000 	.word	0x48001000
 80018a0:	48001400 	.word	0x48001400
 80018a4:	48001800 	.word	0x48001800
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43d9      	mvns	r1, r3
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	400b      	ands	r3, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <HAL_PWREx_GetVoltageRange+0x18>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40007000 	.word	0x40007000

0800192c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193a:	d130      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001948:	d038      	beq.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001952:	4a1e      	ldr	r2, [pc, #120]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2232      	movs	r2, #50	@ 0x32
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001970:	e002      	b.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3b01      	subs	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001984:	d102      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f2      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001998:	d110      	bne.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e00f      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d007      	beq.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019b4:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40007000 	.word	0x40007000
 80019d0:	20000000 	.word	0x20000000
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e3ca      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ea:	4b97      	ldr	r3, [pc, #604]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	4b94      	ldr	r3, [pc, #592]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80e4 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4a>
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f040 808b 	bne.w	8001b30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	f040 8087 	bne.w	8001b30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a22:	4b89      	ldr	r3, [pc, #548]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e3a2      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1a      	ldr	r2, [r3, #32]
 8001a3e:	4b82      	ldr	r3, [pc, #520]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_RCC_OscConfig+0x7c>
 8001a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a52:	e005      	b.n	8001a60 <HAL_RCC_OscConfig+0x88>
 8001a54:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d223      	bcs.n	8001aac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fd55 	bl	8002518 <RCC_SetFlashLatencyFromMSIRange>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e383      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a78:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a72      	ldr	r2, [pc, #456]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b70      	ldr	r3, [pc, #448]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	496d      	ldr	r1, [pc, #436]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a96:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4968      	ldr	r1, [pc, #416]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e025      	b.n	8001af8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aac:	4b66      	ldr	r3, [pc, #408]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b63      	ldr	r3, [pc, #396]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4960      	ldr	r1, [pc, #384]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aca:	4b5f      	ldr	r3, [pc, #380]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	495b      	ldr	r1, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fd15 	bl	8002518 <RCC_SetFlashLatencyFromMSIRange>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e343      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af8:	f000 fc4a 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b52      	ldr	r3, [pc, #328]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	4950      	ldr	r1, [pc, #320]	@ (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	4a4e      	ldr	r2, [pc, #312]	@ (8001c50 <HAL_RCC_OscConfig+0x278>)
 8001b16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b18:	4b4e      	ldr	r3, [pc, #312]	@ (8001c54 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fb2f 	bl	8001180 <HAL_InitTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d052      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	e327      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d032      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b38:	4b43      	ldr	r3, [pc, #268]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fb6c 	bl	8001220 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fb68 	bl	8001220 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e310      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a36      	ldr	r2, [pc, #216]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4931      	ldr	r1, [pc, #196]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b88:	4b2f      	ldr	r3, [pc, #188]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	492c      	ldr	r1, [pc, #176]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e01a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a29      	ldr	r2, [pc, #164]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fb39 	bl	8001220 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fb35 	bl	8001220 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e2dd      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc4:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1da>
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d074      	beq.n	8001cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x21a>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d10e      	bne.n	8001c0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d064      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d160      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e2ba      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x24a>
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e026      	b.n	8001c70 <HAL_RCC_OscConfig+0x298>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_OscConfig+0x280>
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a02      	ldr	r2, [pc, #8]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e014      	b.n	8001c70 <HAL_RCC_OscConfig+0x298>
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08007c5c 	.word	0x08007c5c
 8001c50:	20000000 	.word	0x20000000
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	4ba0      	ldr	r3, [pc, #640]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a9f      	ldr	r2, [pc, #636]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b9d      	ldr	r3, [pc, #628]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a9c      	ldr	r2, [pc, #624]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fad2 	bl	8001220 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff face 	bl	8001220 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e276      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2a8>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fabe 	bl	8001220 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff faba 	bl	8001220 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e262      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2d0>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d060      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x310>
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d119      	bne.n	8001d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d116      	bne.n	8001d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_OscConfig+0x328>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e23f      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	4973      	ldr	r1, [pc, #460]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d14:	e040      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d023      	beq.n	8001d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa79 	bl	8001220 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff fa75 	bl	8001220 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e21d      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	4b65      	ldr	r3, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b62      	ldr	r3, [pc, #392]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	495f      	ldr	r1, [pc, #380]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
 8001d64:	e018      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d66:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fa55 	bl	8001220 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fa51 	bl	8001220 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1f9      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dac:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db2:	4a4a      	ldr	r2, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fa30 	bl	8001220 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fa2c 	bl	8001220 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1d4      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ef      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x3ec>
 8001de4:	e01b      	b.n	8001e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dec:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff fa13 	bl	8001220 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fa0f 	bl	8001220 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e1b7      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e10:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80a6 	beq.w	8001f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e30:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d118      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e70:	f7ff f9d6 	bl	8001220 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7ff f9d2 	bl	8001220 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e17a      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4d8>
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eae:	e029      	b.n	8001f04 <HAL_RCC_OscConfig+0x52c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d115      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x50c>
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x52c>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	4b9c      	ldr	r3, [pc, #624]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a9b      	ldr	r2, [pc, #620]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef4:	4b98      	ldr	r3, [pc, #608]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a97      	ldr	r2, [pc, #604]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f988 	bl	8001220 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff f984 	bl	8001220 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e12a      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ed      	beq.n	8001f14 <HAL_RCC_OscConfig+0x53c>
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f971 	bl	8001220 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff f96d 	bl	8001220 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e113      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f58:	4b7f      	ldr	r3, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ed      	bne.n	8001f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f66:	7ffb      	ldrb	r3, [r7, #31]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	4a79      	ldr	r2, [pc, #484]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80fe 	beq.w	800217e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	f040 80d0 	bne.w	800212c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f8c:	4b72      	ldr	r3, [pc, #456]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d130      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	3b01      	subs	r3, #1
 8001fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d127      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11f      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fcc:	2a07      	cmp	r2, #7
 8001fce:	bf14      	ite	ne
 8001fd0:	2201      	movne	r2, #1
 8001fd2:	2200      	moveq	r2, #0
 8001fd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d113      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d06e      	beq.n	80020e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d069      	beq.n	80020dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0ad      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002024:	4b4c      	ldr	r3, [pc, #304]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002030:	f7ff f8f6 	bl	8001220 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f8f2 	bl	8001220 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e09a      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204a:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002056:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b40      	ldr	r3, [pc, #256]	@ (800215c <HAL_RCC_OscConfig+0x784>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002066:	3a01      	subs	r2, #1
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002070:	0212      	lsls	r2, r2, #8
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002078:	0852      	lsrs	r2, r2, #1
 800207a:	3a01      	subs	r2, #1
 800207c:	0552      	lsls	r2, r2, #21
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002084:	0852      	lsrs	r2, r2, #1
 8002086:	3a01      	subs	r2, #1
 8002088:	0652      	lsls	r2, r2, #25
 800208a:	4311      	orrs	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002090:	0912      	lsrs	r2, r2, #4
 8002092:	0452      	lsls	r2, r2, #17
 8002094:	430a      	orrs	r2, r1
 8002096:	4930      	ldr	r1, [pc, #192]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002098:	4313      	orrs	r3, r2
 800209a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b4:	f7ff f8b4 	bl	8001220 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7ff f8b0 	bl	8001220 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e058      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020da:	e050      	b.n	800217e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e04f      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d148      	bne.n	800217e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002104:	f7ff f88c 	bl	8001220 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f888 	bl	8001220 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e030      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x734>
 800212a:	e028      	b.n	800217e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d023      	beq.n	800217a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002138:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7ff f86f 	bl	8001220 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	e00c      	b.n	8002160 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff f86b 	bl	8001220 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d905      	bls.n	8002160 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e013      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
 8002158:	40021000 	.word	0x40021000
 800215c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_OscConfig+0x7b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ec      	bne.n	8002146 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCC_OscConfig+0x7b0>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4905      	ldr	r1, [pc, #20]	@ (8002188 <HAL_RCC_OscConfig+0x7b0>)
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x7b4>)
 8002174:	4013      	ands	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
 8002178:	e001      	b.n	800217e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	feeefffc 	.word	0xfeeefffc

08002190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0e7      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b75      	ldr	r3, [pc, #468]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b72      	ldr	r3, [pc, #456]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4970      	ldr	r1, [pc, #448]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b6e      	ldr	r3, [pc, #440]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0cf      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b66      	ldr	r3, [pc, #408]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d908      	bls.n	8002202 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4960      	ldr	r1, [pc, #384]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d04c      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	4b5a      	ldr	r3, [pc, #360]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d121      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0a6      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222e:	4b54      	ldr	r3, [pc, #336]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e09a      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002246:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08e      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e086      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4943      	ldr	r1, [pc, #268]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002278:	f7fe ffd2 	bl	8001220 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe ffce 	bl	8001220 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e06e      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d208      	bcs.n	80022d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	492b      	ldr	r1, [pc, #172]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d6:	4b29      	ldr	r3, [pc, #164]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d210      	bcs.n	8002306 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e4:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 0207 	bic.w	r2, r3, #7
 80022ec:	4923      	ldr	r1, [pc, #140]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e036      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4918      	ldr	r1, [pc, #96]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4910      	ldr	r1, [pc, #64]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002344:	f000 f824 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	490b      	ldr	r1, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1f4>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002364:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1fc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe ff09 	bl	8001180 <HAL_InitTick>
 800236e:	4603      	mov	r3, r0
 8002370:	72fb      	strb	r3, [r7, #11]

  return status;
 8002372:	7afb      	ldrb	r3, [r7, #11]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
 8002384:	08007c5c 	.word	0x08007c5c
 8002388:	20000000 	.word	0x20000000
 800238c:	2000000c 	.word	0x2000000c

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d121      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11e      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c4:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d0:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ec:	4a2b      	ldr	r2, [pc, #172]	@ (800249c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d102      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002408:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	e004      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d101      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002416:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d134      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0xa6>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d003      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xac>
 8002434:	e005      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800243e:	617b      	str	r3, [r7, #20]
      break;
 8002440:	e002      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	617b      	str	r3, [r7, #20]
      break;
 8002446:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002448:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	fb03 f202 	mul.w	r2, r3, r2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	0e5b      	lsrs	r3, r3, #25
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	3301      	adds	r3, #1
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002488:	69bb      	ldr	r3, [r7, #24]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	08007c74 	.word	0x08007c74
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200

080024a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08007c6c 	.word	0x08007c6c

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024f0:	f7ff ffda 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0adb      	lsrs	r3, r3, #11
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4904      	ldr	r1, [pc, #16]	@ (8002514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08007c6c 	.word	0x08007c6c

08002518 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002530:	f7ff f9ee 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 8002534:	6178      	str	r0, [r7, #20]
 8002536:	e014      	b.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	4a24      	ldr	r2, [pc, #144]	@ (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	@ 0x58
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002550:	f7ff f9de 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 8002554:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	4a1d      	ldr	r2, [pc, #116]	@ (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002568:	d10b      	bne.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	@ 0x80
 800256e:	d919      	bls.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2ba0      	cmp	r3, #160	@ 0xa0
 8002574:	d902      	bls.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002576:	2302      	movs	r3, #2
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e013      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e010      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b80      	cmp	r3, #128	@ 0x80
 8002586:	d902      	bls.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002588:	2303      	movs	r3, #3
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e00a      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b80      	cmp	r3, #128	@ 0x80
 8002592:	d102      	bne.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002594:	2302      	movs	r3, #2
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e004      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b70      	cmp	r3, #112	@ 0x70
 800259e:	d101      	bne.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 0207 	bic.w	r2, r3, #7
 80025ac:	4909      	ldr	r1, [pc, #36]	@ (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40022000 	.word	0x40022000

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d041      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025fc:	d02a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002602:	d824      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002604:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002608:	d008      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800260a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800260e:	d81e      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002618:	d010      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800261a:	e018      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800261c:	4b86      	ldr	r3, [pc, #536]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a85      	ldr	r2, [pc, #532]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002626:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002628:	e015      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fabb 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800263a:	e00c      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3320      	adds	r3, #32
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fba6 	bl	8002d94 <RCCEx_PLLSAI2_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800264c:	e003      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	74fb      	strb	r3, [r7, #19]
      break;
 8002652:	e000      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800265c:	4b76      	ldr	r3, [pc, #472]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800266a:	4973      	ldr	r1, [pc, #460]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002672:	e001      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d041      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002688:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800268c:	d02a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800268e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002692:	d824      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800269a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800269e:	d81e      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a8:	d010      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026aa:	e018      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026ac:	4b62      	ldr	r3, [pc, #392]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a61      	ldr	r2, [pc, #388]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b8:	e015      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fa73 	bl	8002bac <RCCEx_PLLSAI1_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ca:	e00c      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3320      	adds	r3, #32
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fb5e 	bl	8002d94 <RCCEx_PLLSAI2_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	74fb      	strb	r3, [r7, #19]
      break;
 80026e2:	e000      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ec:	4b52      	ldr	r3, [pc, #328]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026fa:	494f      	ldr	r1, [pc, #316]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a0 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	4a40      	ldr	r2, [pc, #256]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	@ 0x58
 800273c:	4b3e      	ldr	r3, [pc, #248]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3a      	ldr	r2, [pc, #232]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002758:	f7fe fd62 	bl	8001220 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275e:	e009      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7fe fd5e 	bl	8001220 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d902      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	74fb      	strb	r3, [r7, #19]
        break;
 8002772:	e005      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002774:	4b31      	ldr	r3, [pc, #196]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d15c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002786:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002790:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01f      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d019      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a4:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b0:	4b21      	ldr	r3, [pc, #132]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	4a20      	ldr	r2, [pc, #128]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fd1d 	bl	8001220 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e8:	e00b      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fd19 	bl	8001220 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d902      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002800:	e006      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ec      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002826:	4904      	ldr	r1, [pc, #16]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800282e:	e009      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
 8002834:	e006      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002844:	7c7b      	ldrb	r3, [r7, #17]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b9e      	ldr	r3, [pc, #632]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	4a9d      	ldr	r2, [pc, #628]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	4b98      	ldr	r3, [pc, #608]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	4994      	ldr	r1, [pc, #592]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002884:	4b8f      	ldr	r3, [pc, #572]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	f023 020c 	bic.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002892:	498c      	ldr	r1, [pc, #560]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a6:	4b87      	ldr	r3, [pc, #540]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4983      	ldr	r1, [pc, #524]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	497b      	ldr	r1, [pc, #492]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ea:	4b76      	ldr	r3, [pc, #472]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f8:	4972      	ldr	r1, [pc, #456]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800290c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	496a      	ldr	r1, [pc, #424]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292e:	4b65      	ldr	r3, [pc, #404]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	4961      	ldr	r1, [pc, #388]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002950:	4b5c      	ldr	r3, [pc, #368]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295e:	4959      	ldr	r1, [pc, #356]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	4b54      	ldr	r3, [pc, #336]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002980:	4950      	ldr	r1, [pc, #320]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002994:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	4948      	ldr	r1, [pc, #288]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b6:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	493f      	ldr	r1, [pc, #252]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d028      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e6:	4937      	ldr	r1, [pc, #220]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029f6:	d106      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a31      	ldr	r2, [pc, #196]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]
 8002a04:	e011      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f8c8 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d028      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a36:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	491f      	ldr	r1, [pc, #124]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a60:	60d3      	str	r3, [r2, #12]
 8002a62:	e011      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f899 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02b      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa2:	4908      	ldr	r1, [pc, #32]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a02      	ldr	r2, [pc, #8]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002abe:	60d3      	str	r3, [r2, #12]
 8002ac0:	e014      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f867 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02f      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b06:	4928      	ldr	r1, [pc, #160]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b16:	d10d      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f844 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d014      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
 8002b32:	e011      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3320      	adds	r3, #32
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f925 	bl	8002d94 <RCCEx_PLLSAI2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b64:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b72:	490d      	ldr	r1, [pc, #52]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b96:	4904      	ldr	r1, [pc, #16]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000

08002bac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bba:	4b75      	ldr	r3, [pc, #468]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d018      	beq.n	8002bf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bc6:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bde:	4b6c      	ldr	r3, [pc, #432]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
       ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d047      	beq.n	8002c82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e044      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d018      	beq.n	8002c32 <RCCEx_PLLSAI1_Config+0x86>
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d825      	bhi.n	8002c50 <RCCEx_PLLSAI1_Config+0xa4>
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d002      	beq.n	8002c0e <RCCEx_PLLSAI1_Config+0x62>
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d009      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x74>
 8002c0c:	e020      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0e:	4b60      	ldr	r3, [pc, #384]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11d      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e01a      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c20:	4b5b      	ldr	r3, [pc, #364]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e013      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c32:	4b57      	ldr	r3, [pc, #348]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3e:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4e:	e006      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e004      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	4944      	ldr	r1, [pc, #272]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d17d      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c88:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a40      	ldr	r2, [pc, #256]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c94:	f7fe fac4 	bl	8001220 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c9c:	f7fe fac0 	bl	8001220 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
        break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cb0:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ef      	bne.n	8002c9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d160      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d111      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc8:	4b31      	ldr	r3, [pc, #196]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6892      	ldr	r2, [r2, #8]
 8002cd8:	0211      	lsls	r1, r2, #8
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	0912      	lsrs	r2, r2, #4
 8002ce0:	0452      	lsls	r2, r2, #17
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	492a      	ldr	r1, [pc, #168]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]
 8002cea:	e027      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d112      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf2:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cfa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	0211      	lsls	r1, r2, #8
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6912      	ldr	r2, [r2, #16]
 8002d08:	0852      	lsrs	r2, r2, #1
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	0552      	lsls	r2, r2, #21
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	491f      	ldr	r1, [pc, #124]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	610b      	str	r3, [r1, #16]
 8002d16:	e011      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	0211      	lsls	r1, r2, #8
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6952      	ldr	r2, [r2, #20]
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0652      	lsls	r2, r2, #25
 8002d34:	430a      	orrs	r2, r1
 8002d36:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe fa6a 	bl	8001220 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4e:	e009      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d50:	f7fe fa66 	bl	8001220 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
          break;
 8002d62:	e005      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d64:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ef      	beq.n	8002d50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4904      	ldr	r1, [pc, #16]	@ (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dae:	4b67      	ldr	r3, [pc, #412]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0203 	and.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d10d      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dc6:	4b61      	ldr	r3, [pc, #388]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d047      	beq.n	8002e6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	e044      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d018      	beq.n	8002e1a <RCCEx_PLLSAI2_Config+0x86>
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d825      	bhi.n	8002e38 <RCCEx_PLLSAI2_Config+0xa4>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0x62>
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d009      	beq.n	8002e08 <RCCEx_PLLSAI2_Config+0x74>
 8002df4:	e020      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002df6:	4b55      	ldr	r3, [pc, #340]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11d      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e06:	e01a      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e08:	4b50      	ldr	r3, [pc, #320]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e18:	e013      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e26:	4b49      	ldr	r3, [pc, #292]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e36:	e006      	b.n	8002e46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3c:	e004      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	430b      	orrs	r3, r1
 8002e64:	4939      	ldr	r1, [pc, #228]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d167      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a35      	ldr	r2, [pc, #212]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7fe f9d0 	bl	8001220 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e82:	e009      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e84:	f7fe f9cc 	bl	8001220 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	73fb      	strb	r3, [r7, #15]
        break;
 8002e96:	e005      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e98:	4b2c      	ldr	r3, [pc, #176]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ef      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d14a      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eb0:	4b26      	ldr	r3, [pc, #152]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	0211      	lsls	r1, r2, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	0912      	lsrs	r2, r2, #4
 8002ec8:	0452      	lsls	r2, r2, #17
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	491f      	ldr	r1, [pc, #124]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	614b      	str	r3, [r1, #20]
 8002ed2:	e011      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002edc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	0211      	lsls	r1, r2, #8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6912      	ldr	r2, [r2, #16]
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0652      	lsls	r2, r2, #25
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4916      	ldr	r1, [pc, #88]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe f98c 	bl	8001220 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0c:	f7fe f988 	bl	8001220 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e040      	b.n	8002fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fe36 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	@ 0x24
 8002f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fedc 	bl	8003d54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fc21 	bl	80037e4 <UART_SetConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01b      	b.n	8002fe4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 ff5b 	bl	8003e98 <UART_CheckIdleState>
 8002fe2:	4603      	mov	r3, r0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003000:	2b20      	cmp	r3, #32
 8003002:	d177      	bne.n	80030f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Transmit+0x24>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e070      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2221      	movs	r2, #33	@ 0x21
 8003020:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fe f8fd 	bl	8001220 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Transmit+0x68>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800305c:	e02f      	b.n	80030be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	@ 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 ffbd 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e03b      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003090:	b292      	uxth	r2, r2
 8003092:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	3302      	adds	r3, #2
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e007      	b.n	80030ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1c9      	bne.n	800305e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2140      	movs	r1, #64	@ 0x40
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 ff87 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d004      	beq.n	80030ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e005      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003114:	2b20      	cmp	r3, #32
 8003116:	d137      	bne.n	8003188 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Receive_IT+0x24>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e030      	b.n	800318a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_UART_Receive_IT+0x94>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01f      	beq.n	8003178 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d018      	beq.n	8003178 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	613b      	str	r3, [r7, #16]
   return(result);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	69f9      	ldr	r1, [r7, #28]
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	61bb      	str	r3, [r7, #24]
   return(result);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e6      	bne.n	8003146 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	461a      	mov	r2, r3
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 ffa0 	bl	80040c4 <UART_Start_Receive_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	e000      	b.n	800318a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3728      	adds	r7, #40	@ 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40008000 	.word	0x40008000

08003198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0ba      	sub	sp, #232	@ 0xe8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80031c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80031c6:	4013      	ands	r3, r2
 80031c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80031cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d115      	bne.n	8003200 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00f      	beq.n	8003200 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 82ca 	beq.w	800378a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
      }
      return;
 80031fe:	e2c4      	b.n	800378a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8117 	beq.w	8003438 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800320a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003216:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800321a:	4b85      	ldr	r3, [pc, #532]	@ (8003430 <HAL_UART_IRQHandler+0x298>)
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 810a 	beq.w	8003438 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d011      	beq.n	8003254 <HAL_UART_IRQHandler+0xbc>
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d011      	beq.n	8003284 <HAL_UART_IRQHandler+0xec>
 8003260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2202      	movs	r2, #2
 8003272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800327a:	f043 0204 	orr.w	r2, r3, #4
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d011      	beq.n	80032b4 <HAL_UART_IRQHandler+0x11c>
 8003290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2204      	movs	r2, #4
 80032a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032aa:	f043 0202 	orr.w	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d017      	beq.n	80032f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2208      	movs	r2, #8
 80032de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032e6:	f043 0208 	orr.w	r2, r3, #8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <HAL_UART_IRQHandler+0x18a>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003300:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8230 	beq.w	800378e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800333a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800335c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b40      	cmp	r3, #64	@ 0x40
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003372:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003376:	2b00      	cmp	r3, #0
 8003378:	d04f      	beq.n	800341a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 ff68 	bl	8004250 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d141      	bne.n	8003412 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1d9      	bne.n	800338e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d013      	beq.n	800340a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e6:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <HAL_UART_IRQHandler+0x29c>)
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f871 	bl	80014d6 <HAL_DMA_Abort_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d017      	beq.n	800342a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003404:	4610      	mov	r0, r2
 8003406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	e00f      	b.n	800342a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9d4 	bl	80037b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	e00b      	b.n	800342a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9d0 	bl	80037b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	e007      	b.n	800342a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f9cc 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003428:	e1b1      	b.n	800378e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342a:	bf00      	nop
    return;
 800342c:	e1af      	b.n	800378e <HAL_UART_IRQHandler+0x5f6>
 800342e:	bf00      	nop
 8003430:	04000120 	.word	0x04000120
 8003434:	08004319 	.word	0x08004319

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 816a 	bne.w	8003716 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8163 	beq.w	8003716 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 815c 	beq.w	8003716 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2210      	movs	r2, #16
 8003464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b40      	cmp	r3, #64	@ 0x40
 8003472:	f040 80d4 	bne.w	800361e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003482:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80ad 	beq.w	80035e6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003496:	429a      	cmp	r2, r3
 8003498:	f080 80a5 	bcs.w	80035e6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8086 	bne.w	80035c4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1da      	bne.n	80034b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3308      	adds	r3, #8
 8003508:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003512:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3308      	adds	r3, #8
 8003522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003526:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800352a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800352e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e1      	bne.n	8003502 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800354e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3308      	adds	r3, #8
 800355e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003562:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003564:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003568:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e3      	bne.n	800353e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003594:	f023 0310 	bic.w	r3, r3, #16
 8003598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e4      	bne.n	8003584 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd ff4b 	bl	800145a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8f4 	bl	80037cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80035e4:	e0d5      	b.n	8003792 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80035ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 80ce 	bne.w	8003792 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	f040 80c5 	bne.w	8003792 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8d8 	bl	80037cc <HAL_UARTEx_RxEventCallback>
      return;
 800361c:	e0b9      	b.n	8003792 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800362a:	b29b      	uxth	r3, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80ab 	beq.w	8003796 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a6 	beq.w	8003796 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800365e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800366c:	647b      	str	r3, [r7, #68]	@ 0x44
 800366e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800367a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e4      	bne.n	800364a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	623b      	str	r3, [r7, #32]
   return(result);
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e3      	bne.n	8003680 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 0310 	bic.w	r3, r3, #16
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	617b      	str	r3, [r7, #20]
   return(result);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e4      	bne.n	80036cc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f85c 	bl	80037cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003714:	e03f      	b.n	8003796 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00e      	beq.n	8003740 <HAL_UART_IRQHandler+0x5a8>
 8003722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 ffe9 	bl	8004710 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800373e:	e02d      	b.n	800379c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01c      	beq.n	800379a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
    }
    return;
 8003768:	e017      	b.n	800379a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_UART_IRQHandler+0x604>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fdde 	bl	8004344 <UART_EndTransmit_IT>
    return;
 8003788:	e008      	b.n	800379c <HAL_UART_IRQHandler+0x604>
      return;
 800378a:	bf00      	nop
 800378c:	e006      	b.n	800379c <HAL_UART_IRQHandler+0x604>
    return;
 800378e:	bf00      	nop
 8003790:	e004      	b.n	800379c <HAL_UART_IRQHandler+0x604>
      return;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <HAL_UART_IRQHandler+0x604>
      return;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_UART_IRQHandler+0x604>
    return;
 800379a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800379c:	37e8      	adds	r7, #232	@ 0xe8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop

080037a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e8:	b08a      	sub	sp, #40	@ 0x28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4313      	orrs	r3, r2
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4ba4      	ldr	r3, [pc, #656]	@ (8003aa4 <UART_SetConfig+0x2c0>)
 8003814:	4013      	ands	r3, r2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800381c:	430b      	orrs	r3, r1
 800381e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a99      	ldr	r2, [pc, #612]	@ (8003aa8 <UART_SetConfig+0x2c4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384c:	4313      	orrs	r3, r2
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003860:	430a      	orrs	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a90      	ldr	r2, [pc, #576]	@ (8003aac <UART_SetConfig+0x2c8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d126      	bne.n	80038bc <UART_SetConfig+0xd8>
 800386e:	4b90      	ldr	r3, [pc, #576]	@ (8003ab0 <UART_SetConfig+0x2cc>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b03      	cmp	r3, #3
 800387a:	d81b      	bhi.n	80038b4 <UART_SetConfig+0xd0>
 800387c:	a201      	add	r2, pc, #4	@ (adr r2, 8003884 <UART_SetConfig+0xa0>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	08003895 	.word	0x08003895
 8003888:	080038a5 	.word	0x080038a5
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038ad 	.word	0x080038ad
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389a:	e116      	b.n	8003aca <UART_SetConfig+0x2e6>
 800389c:	2302      	movs	r3, #2
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a2:	e112      	b.n	8003aca <UART_SetConfig+0x2e6>
 80038a4:	2304      	movs	r3, #4
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038aa:	e10e      	b.n	8003aca <UART_SetConfig+0x2e6>
 80038ac:	2308      	movs	r3, #8
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e10a      	b.n	8003aca <UART_SetConfig+0x2e6>
 80038b4:	2310      	movs	r3, #16
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ba:	e106      	b.n	8003aca <UART_SetConfig+0x2e6>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab4 <UART_SetConfig+0x2d0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d138      	bne.n	8003938 <UART_SetConfig+0x154>
 80038c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab0 <UART_SetConfig+0x2cc>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	d82d      	bhi.n	8003930 <UART_SetConfig+0x14c>
 80038d4:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <UART_SetConfig+0xf8>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003911 	.word	0x08003911
 80038e0:	08003931 	.word	0x08003931
 80038e4:	08003931 	.word	0x08003931
 80038e8:	08003931 	.word	0x08003931
 80038ec:	08003921 	.word	0x08003921
 80038f0:	08003931 	.word	0x08003931
 80038f4:	08003931 	.word	0x08003931
 80038f8:	08003931 	.word	0x08003931
 80038fc:	08003919 	.word	0x08003919
 8003900:	08003931 	.word	0x08003931
 8003904:	08003931 	.word	0x08003931
 8003908:	08003931 	.word	0x08003931
 800390c:	08003929 	.word	0x08003929
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003916:	e0d8      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003918:	2302      	movs	r3, #2
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391e:	e0d4      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003920:	2304      	movs	r3, #4
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003926:	e0d0      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003928:	2308      	movs	r3, #8
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392e:	e0cc      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003930:	2310      	movs	r3, #16
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003936:	e0c8      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab8 <UART_SetConfig+0x2d4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d125      	bne.n	800398e <UART_SetConfig+0x1aa>
 8003942:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab0 <UART_SetConfig+0x2cc>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800394c:	2b30      	cmp	r3, #48	@ 0x30
 800394e:	d016      	beq.n	800397e <UART_SetConfig+0x19a>
 8003950:	2b30      	cmp	r3, #48	@ 0x30
 8003952:	d818      	bhi.n	8003986 <UART_SetConfig+0x1a2>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d00a      	beq.n	800396e <UART_SetConfig+0x18a>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d814      	bhi.n	8003986 <UART_SetConfig+0x1a2>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <UART_SetConfig+0x182>
 8003960:	2b10      	cmp	r3, #16
 8003962:	d008      	beq.n	8003976 <UART_SetConfig+0x192>
 8003964:	e00f      	b.n	8003986 <UART_SetConfig+0x1a2>
 8003966:	2300      	movs	r3, #0
 8003968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396c:	e0ad      	b.n	8003aca <UART_SetConfig+0x2e6>
 800396e:	2302      	movs	r3, #2
 8003970:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003974:	e0a9      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003976:	2304      	movs	r3, #4
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397c:	e0a5      	b.n	8003aca <UART_SetConfig+0x2e6>
 800397e:	2308      	movs	r3, #8
 8003980:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003984:	e0a1      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003986:	2310      	movs	r3, #16
 8003988:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398c:	e09d      	b.n	8003aca <UART_SetConfig+0x2e6>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <UART_SetConfig+0x2d8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d125      	bne.n	80039e4 <UART_SetConfig+0x200>
 8003998:	4b45      	ldr	r3, [pc, #276]	@ (8003ab0 <UART_SetConfig+0x2cc>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80039a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039a4:	d016      	beq.n	80039d4 <UART_SetConfig+0x1f0>
 80039a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80039a8:	d818      	bhi.n	80039dc <UART_SetConfig+0x1f8>
 80039aa:	2b80      	cmp	r3, #128	@ 0x80
 80039ac:	d00a      	beq.n	80039c4 <UART_SetConfig+0x1e0>
 80039ae:	2b80      	cmp	r3, #128	@ 0x80
 80039b0:	d814      	bhi.n	80039dc <UART_SetConfig+0x1f8>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <UART_SetConfig+0x1d8>
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d008      	beq.n	80039cc <UART_SetConfig+0x1e8>
 80039ba:	e00f      	b.n	80039dc <UART_SetConfig+0x1f8>
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e082      	b.n	8003aca <UART_SetConfig+0x2e6>
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e07e      	b.n	8003aca <UART_SetConfig+0x2e6>
 80039cc:	2304      	movs	r3, #4
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e07a      	b.n	8003aca <UART_SetConfig+0x2e6>
 80039d4:	2308      	movs	r3, #8
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e076      	b.n	8003aca <UART_SetConfig+0x2e6>
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e072      	b.n	8003aca <UART_SetConfig+0x2e6>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a35      	ldr	r2, [pc, #212]	@ (8003ac0 <UART_SetConfig+0x2dc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d12a      	bne.n	8003a44 <UART_SetConfig+0x260>
 80039ee:	4b30      	ldr	r3, [pc, #192]	@ (8003ab0 <UART_SetConfig+0x2cc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039fc:	d01a      	beq.n	8003a34 <UART_SetConfig+0x250>
 80039fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a02:	d81b      	bhi.n	8003a3c <UART_SetConfig+0x258>
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a08:	d00c      	beq.n	8003a24 <UART_SetConfig+0x240>
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0e:	d815      	bhi.n	8003a3c <UART_SetConfig+0x258>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <UART_SetConfig+0x238>
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a18:	d008      	beq.n	8003a2c <UART_SetConfig+0x248>
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x258>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a22:	e052      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2a:	e04e      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a32:	e04a      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3a:	e046      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e042      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <UART_SetConfig+0x2c4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d13a      	bne.n	8003ac4 <UART_SetConfig+0x2e0>
 8003a4e:	4b18      	ldr	r3, [pc, #96]	@ (8003ab0 <UART_SetConfig+0x2cc>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a5c:	d01a      	beq.n	8003a94 <UART_SetConfig+0x2b0>
 8003a5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a62:	d81b      	bhi.n	8003a9c <UART_SetConfig+0x2b8>
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a68:	d00c      	beq.n	8003a84 <UART_SetConfig+0x2a0>
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6e:	d815      	bhi.n	8003a9c <UART_SetConfig+0x2b8>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <UART_SetConfig+0x298>
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a78:	d008      	beq.n	8003a8c <UART_SetConfig+0x2a8>
 8003a7a:	e00f      	b.n	8003a9c <UART_SetConfig+0x2b8>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a82:	e022      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e01e      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a92:	e01a      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a94:	2308      	movs	r3, #8
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9a:	e016      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa2:	e012      	b.n	8003aca <UART_SetConfig+0x2e6>
 8003aa4:	efff69f3 	.word	0xefff69f3
 8003aa8:	40008000 	.word	0x40008000
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	40004800 	.word	0x40004800
 8003abc:	40004c00 	.word	0x40004c00
 8003ac0:	40005000 	.word	0x40005000
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a9f      	ldr	r2, [pc, #636]	@ (8003d4c <UART_SetConfig+0x568>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d17a      	bne.n	8003bca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d824      	bhi.n	8003b26 <UART_SetConfig+0x342>
 8003adc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0x300>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b27 	.word	0x08003b27
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b27 	.word	0x08003b27
 8003af4:	08003b17 	.word	0x08003b17
 8003af8:	08003b27 	.word	0x08003b27
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b27 	.word	0x08003b27
 8003b04:	08003b1f 	.word	0x08003b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe fcda 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	61f8      	str	r0, [r7, #28]
        break;
 8003b0e:	e010      	b.n	8003b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b8f      	ldr	r3, [pc, #572]	@ (8003d50 <UART_SetConfig+0x56c>)
 8003b12:	61fb      	str	r3, [r7, #28]
        break;
 8003b14:	e00d      	b.n	8003b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe fc3b 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8003b1a:	61f8      	str	r0, [r7, #28]
        break;
 8003b1c:	e009      	b.n	8003b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b22:	61fb      	str	r3, [r7, #28]
        break;
 8003b24:	e005      	b.n	8003b32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80fb 	beq.w	8003d30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d305      	bcc.n	8003b56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d903      	bls.n	8003b5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b5c:	e0e8      	b.n	8003d30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2200      	movs	r2, #0
 8003b62:	461c      	mov	r4, r3
 8003b64:	4615      	mov	r5, r2
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	022b      	lsls	r3, r5, #8
 8003b70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b74:	0222      	lsls	r2, r4, #8
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	6849      	ldr	r1, [r1, #4]
 8003b7a:	0849      	lsrs	r1, r1, #1
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	4688      	mov	r8, r1
 8003b80:	4681      	mov	r9, r0
 8003b82:	eb12 0a08 	adds.w	sl, r2, r8
 8003b86:	eb43 0b09 	adc.w	fp, r3, r9
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b98:	4650      	mov	r0, sl
 8003b9a:	4659      	mov	r1, fp
 8003b9c:	f7fc fb68 	bl	8000270 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bae:	d308      	bcc.n	8003bc2 <UART_SetConfig+0x3de>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb6:	d204      	bcs.n	8003bc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	e0b6      	b.n	8003d30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bc8:	e0b2      	b.n	8003d30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd2:	d15e      	bne.n	8003c92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d828      	bhi.n	8003c2e <UART_SetConfig+0x44a>
 8003bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <UART_SetConfig+0x400>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fc5a 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61f8      	str	r0, [r7, #28]
        break;
 8003c0e:	e014      	b.n	8003c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe fc6c 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
        break;
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b4d      	ldr	r3, [pc, #308]	@ (8003d50 <UART_SetConfig+0x56c>)
 8003c1a:	61fb      	str	r3, [r7, #28]
        break;
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fbb7 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8003c22:	61f8      	str	r0, [r7, #28]
        break;
 8003c24:	e009      	b.n	8003c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2a:	61fb      	str	r3, [r7, #28]
        break;
 8003c2c:	e005      	b.n	8003c3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d077      	beq.n	8003d30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005a      	lsls	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b0f      	cmp	r3, #15
 8003c5a:	d916      	bls.n	8003c8a <UART_SetConfig+0x4a6>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c62:	d212      	bcs.n	8003c8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	8afb      	ldrh	r3, [r7, #22]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	8afa      	ldrh	r2, [r7, #22]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	e052      	b.n	8003d30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c90:	e04e      	b.n	8003d30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d827      	bhi.n	8003cea <UART_SetConfig+0x506>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <UART_SetConfig+0x4bc>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003cd5 	.word	0x08003cd5
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cdb 	.word	0x08003cdb
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe fbfc 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	61f8      	str	r0, [r7, #28]
        break;
 8003cca:	e014      	b.n	8003cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7fe fc0e 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d50 <UART_SetConfig+0x56c>)
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe fb59 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8003cde:	61f8      	str	r0, [r7, #28]
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d019      	beq.n	8003d30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	085a      	lsrs	r2, r3, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	d909      	bls.n	8003d2a <UART_SetConfig+0x546>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1c:	d205      	bcs.n	8003d2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	e002      	b.n	8003d30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40008000 	.word	0x40008000
 8003d50:	00f42400 	.word	0x00f42400

08003d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e52:	d10a      	bne.n	8003e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b098      	sub	sp, #96	@ 0x60
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea8:	f7fd f9ba 	bl	8001220 <HAL_GetTick>
 8003eac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d12e      	bne.n	8003f1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f88c 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d021      	beq.n	8003f1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e6      	bne.n	8003ed6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e062      	b.n	8003fe0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d149      	bne.n	8003fbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f856 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d03c      	beq.n	8003fbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e6      	bne.n	8003f42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3308      	adds	r3, #8
 8003f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f94:	61fa      	str	r2, [r7, #28]
 8003f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69b9      	ldr	r1, [r7, #24]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e011      	b.n	8003fe0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3758      	adds	r7, #88	@ 0x58
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff8:	e04f      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004000:	d04b      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fd f90d 	bl	8001220 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <UART_WaitOnFlagUntilTimeout+0x30>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e04e      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d037      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xb2>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b80      	cmp	r3, #128	@ 0x80
 800402e:	d034      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b40      	cmp	r3, #64	@ 0x40
 8004034:	d031      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d110      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8ff 	bl	8004250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2208      	movs	r2, #8
 8004056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e029      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004074:	d111      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800407e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f8e5 	bl	8004250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e00f      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4013      	ands	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d0a0      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b097      	sub	sp, #92	@ 0x5c
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f6:	d10e      	bne.n	8004116 <UART_Start_Receive_IT+0x52>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <UART_Start_Receive_IT+0x48>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004106:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800410a:	e02d      	b.n	8004168 <UART_Start_Receive_IT+0xa4>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	22ff      	movs	r2, #255	@ 0xff
 8004110:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004114:	e028      	b.n	8004168 <UART_Start_Receive_IT+0xa4>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <UART_Start_Receive_IT+0x76>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <UART_Start_Receive_IT+0x6c>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	22ff      	movs	r2, #255	@ 0xff
 800412a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800412e:	e01b      	b.n	8004168 <UART_Start_Receive_IT+0xa4>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	227f      	movs	r2, #127	@ 0x7f
 8004134:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004138:	e016      	b.n	8004168 <UART_Start_Receive_IT+0xa4>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004142:	d10d      	bne.n	8004160 <UART_Start_Receive_IT+0x9c>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <UART_Start_Receive_IT+0x92>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	227f      	movs	r2, #127	@ 0x7f
 8004150:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004154:	e008      	b.n	8004168 <UART_Start_Receive_IT+0xa4>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	223f      	movs	r2, #63	@ 0x3f
 800415a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800415e:	e003      	b.n	8004168 <UART_Start_Receive_IT+0xa4>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2222      	movs	r2, #34	@ 0x22
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004198:	64ba      	str	r2, [r7, #72]	@ 0x48
 800419a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800419e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80041a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b4:	d107      	bne.n	80041c6 <UART_Start_Receive_IT+0x102>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a21      	ldr	r2, [pc, #132]	@ (8004248 <UART_Start_Receive_IT+0x184>)
 80041c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80041c4:	e002      	b.n	80041cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a20      	ldr	r2, [pc, #128]	@ (800424c <UART_Start_Receive_IT+0x188>)
 80041ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d019      	beq.n	8004208 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80041e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_Start_Receive_IT+0x110>
 8004206:	e018      	b.n	800423a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	613b      	str	r3, [r7, #16]
   return(result);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f043 0320 	orr.w	r3, r3, #32
 800421c:	653b      	str	r3, [r7, #80]	@ 0x50
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	69f9      	ldr	r1, [r7, #28]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	61bb      	str	r3, [r7, #24]
   return(result);
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e6      	bne.n	8004208 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	375c      	adds	r7, #92	@ 0x5c
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	08004555 	.word	0x08004555
 800424c:	08004399 	.word	0x08004399

08004250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b095      	sub	sp, #84	@ 0x54
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800426c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004276:	643b      	str	r3, [r7, #64]	@ 0x40
 8004278:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800427c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e6      	bne.n	8004258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	61fb      	str	r3, [r7, #28]
   return(result);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d118      	bne.n	80042f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	647b      	str	r3, [r7, #68]	@ 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	613b      	str	r3, [r7, #16]
   return(result);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800430c:	bf00      	nop
 800430e:	3754      	adds	r7, #84	@ 0x54
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff fa3e 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	60bb      	str	r3, [r7, #8]
   return(result);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6979      	ldr	r1, [r7, #20]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	613b      	str	r3, [r7, #16]
   return(result);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e6      	bne.n	800434c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fa0a 	bl	80037a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b09c      	sub	sp, #112	@ 0x70
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b0:	2b22      	cmp	r3, #34	@ 0x22
 80043b2:	f040 80be 	bne.w	8004532 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80043bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043c4:	b2d9      	uxtb	r1, r3
 80043c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	400a      	ands	r2, r1
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 80a3 	bne.w	8004546 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004420:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800442c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	667b      	str	r3, [r7, #100]	@ 0x64
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004452:	647a      	str	r2, [r7, #68]	@ 0x44
 8004454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a34      	ldr	r2, [pc, #208]	@ (8004550 <UART_RxISR_8BIT+0x1b8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d01f      	beq.n	80044c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	623b      	str	r3, [r7, #32]
   return(result);
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d12e      	bne.n	800452a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	617b      	str	r3, [r7, #20]
   return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d103      	bne.n	800451a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff f952 	bl	80037cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004528:	e00d      	b.n	8004546 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc f8ce 	bl	80006cc <HAL_UART_RxCpltCallback>
}
 8004530:	e009      	b.n	8004546 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	8b1b      	ldrh	r3, [r3, #24]
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	b292      	uxth	r2, r2
 8004544:	831a      	strh	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	3770      	adds	r7, #112	@ 0x70
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40008000 	.word	0x40008000

08004554 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b09c      	sub	sp, #112	@ 0x70
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004562:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456c:	2b22      	cmp	r3, #34	@ 0x22
 800456e:	f040 80be 	bne.w	80046ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004578:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004582:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004586:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800458a:	4013      	ands	r3, r2
 800458c:	b29a      	uxth	r2, r3
 800458e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004590:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f040 80a3 	bne.w	8004702 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80045ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045da:	657b      	str	r3, [r7, #84]	@ 0x54
 80045dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e6      	bne.n	80045bc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	663b      	str	r3, [r7, #96]	@ 0x60
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3308      	adds	r3, #8
 800460c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800460e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004614:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e5      	bne.n	80045ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a34      	ldr	r2, [pc, #208]	@ (800470c <UART_RxISR_16BIT+0x1b8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d01f      	beq.n	8004680 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	61fb      	str	r3, [r7, #28]
   return(result);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e6      	bne.n	800464e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004684:	2b01      	cmp	r3, #1
 8004686:	d12e      	bne.n	80046e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	60bb      	str	r3, [r7, #8]
   return(result);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 0310 	bic.w	r3, r3, #16
 80046a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6979      	ldr	r1, [r7, #20]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e6      	bne.n	800468e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d103      	bne.n	80046d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2210      	movs	r2, #16
 80046d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff f874 	bl	80037cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046e4:	e00d      	b.n	8004702 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fb fff0 	bl	80006cc <HAL_UART_RxCpltCallback>
}
 80046ec:	e009      	b.n	8004702 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	8b1b      	ldrh	r3, [r3, #24]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0208 	orr.w	r2, r2, #8
 80046fe:	b292      	uxth	r2, r2
 8004700:	831a      	strh	r2, [r3, #24]
}
 8004702:	bf00      	nop
 8004704:	3770      	adds	r7, #112	@ 0x70
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40008000 	.word	0x40008000

08004710 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004736:	2b84      	cmp	r3, #132	@ 0x84
 8004738:	d005      	beq.n	8004746 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800473a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	3303      	adds	r3, #3
 8004744:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004746:	68fb      	ldr	r3, [r7, #12]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004758:	f000 fdca 	bl	80052f0 <vTaskStartScheduler>
  
  return osOK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	bd80      	pop	{r7, pc}

08004762 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004764:	b089      	sub	sp, #36	@ 0x24
 8004766:	af04      	add	r7, sp, #16
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <osThreadCreate+0x54>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01c      	beq.n	80047b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685c      	ldr	r4, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691e      	ldr	r6, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ffc8 	bl	8004724 <makeFreeRtosPriority>
 8004794:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800479e:	9202      	str	r2, [sp, #8]
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	9100      	str	r1, [sp, #0]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4632      	mov	r2, r6
 80047a8:	4629      	mov	r1, r5
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 fbd2 	bl	8004f54 <xTaskCreateStatic>
 80047b0:	4603      	mov	r3, r0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e01c      	b.n	80047f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685c      	ldr	r4, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ffaa 	bl	8004724 <makeFreeRtosPriority>
 80047d0:	4602      	mov	r2, r0
 80047d2:	f107 030c 	add.w	r3, r7, #12
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9200      	str	r2, [sp, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	4632      	mov	r2, r6
 80047de:	4629      	mov	r1, r5
 80047e0:	4620      	mov	r0, r4
 80047e2:	f000 fc17 	bl	8005014 <xTaskCreate>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d001      	beq.n	80047f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <osDelay+0x16>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	e000      	b.n	8004812 <osDelay+0x18>
 8004810:	2301      	movs	r3, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fd36 	bl	8005284 <vTaskDelay>
  
  return osOK;
 8004818:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f103 0208 	add.w	r2, r3, #8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800483a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f103 0208 	add.w	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	601a      	str	r2, [r3, #0]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048da:	d103      	bne.n	80048e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e00c      	b.n	80048fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3308      	adds	r3, #8
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e002      	b.n	80048f2 <vListInsert+0x2e>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d2f6      	bcs.n	80048ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6852      	ldr	r2, [r2, #4]
 8004956:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	429a      	cmp	r2, r3
 8004960:	d103      	bne.n	800496a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1e5a      	subs	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049b8:	f001 fb76 	bl	80060a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	3b01      	subs	r3, #1
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	22ff      	movs	r2, #255	@ 0xff
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	22ff      	movs	r2, #255	@ 0xff
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d114      	bne.n	8004a38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01a      	beq.n	8004a4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3310      	adds	r3, #16
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 feb2 	bl	8005784 <xTaskRemoveFromEventList>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d012      	beq.n	8004a4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a26:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <xQueueGenericReset+0xd0>)
 8004a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	e009      	b.n	8004a4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3310      	adds	r3, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fef0 	bl	8004822 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3324      	adds	r3, #36	@ 0x24
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff feeb 	bl	8004822 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a4c:	f001 fb5e 	bl	800610c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a50:	2301      	movs	r3, #1
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	@ 0x28
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	613b      	str	r3, [r7, #16]
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	fb02 f303 	mul.w	r3, r2, r3
 8004a94:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3348      	adds	r3, #72	@ 0x48
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fc26 	bl	80062ec <pvPortMalloc>
 8004aa0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d011      	beq.n	8004acc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3348      	adds	r3, #72	@ 0x48
 8004ab0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aba:	79fa      	ldrb	r2, [r7, #7]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f805 	bl	8004ad6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004acc:	69bb      	ldr	r3, [r7, #24]
	}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d103      	bne.n	8004af2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e002      	b.n	8004af8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b04:	2101      	movs	r1, #1
 8004b06:	69b8      	ldr	r0, [r7, #24]
 8004b08:	f7ff ff40 	bl	800498c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08e      	sub	sp, #56	@ 0x38
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	623b      	str	r3, [r7, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	61fb      	str	r3, [r7, #28]
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueGiveFromISR+0x5c>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGiveFromISR+0x60>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGiveFromISR+0x62>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	61bb      	str	r3, [r7, #24]
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	e7fd      	b.n	8004b8e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b92:	f001 fb69 	bl	8006268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b96:	f3ef 8211 	mrs	r2, BASEPRI
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	617a      	str	r2, [r7, #20]
 8004bac:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d22b      	bcs.n	8004c1a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bdc:	d112      	bne.n	8004c04 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	3324      	adds	r3, #36	@ 0x24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fdca 	bl	8005784 <xTaskRemoveFromEventList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00e      	beq.n	8004c14 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e007      	b.n	8004c14 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	b25a      	sxtb	r2, r3
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c14:	2301      	movs	r3, #1
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c18:	e001      	b.n	8004c1e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c20:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3738      	adds	r7, #56	@ 0x38
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	@ 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	623b      	str	r3, [r7, #32]
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61fb      	str	r3, [r7, #28]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c88:	f000 ff3c 	bl	8005b04 <xTaskGetSchedulerState>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <xQueueSemaphoreTake+0x64>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <xQueueSemaphoreTake+0x68>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <xQueueSemaphoreTake+0x6a>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	61bb      	str	r3, [r7, #24]
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	e7fd      	b.n	8004cb6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cba:	f001 f9f5 	bl	80060a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d024      	beq.n	8004d14 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	1e5a      	subs	r2, r3, #1
 8004cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cda:	f001 f837 	bl	8005d4c <pvTaskIncrementMutexHeldCount>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00f      	beq.n	8004d0c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	3310      	adds	r3, #16
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fd47 	bl	8005784 <xTaskRemoveFromEventList>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cfc:	4b54      	ldr	r3, [pc, #336]	@ (8004e50 <xQueueSemaphoreTake+0x21c>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d0c:	f001 f9fe 	bl	800610c <vPortExitCritical>
				return pdPASS;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e098      	b.n	8004e46 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d112      	bne.n	8004d40 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	617b      	str	r3, [r7, #20]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d38:	f001 f9e8 	bl	800610c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e082      	b.n	8004e46 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d46:	f107 030c 	add.w	r3, r7, #12
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fd7e 	bl	800584c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d54:	f001 f9da 	bl	800610c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d58:	f000 fb2c 	bl	80053b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d5c:	f001 f9a4 	bl	80060a8 <vPortEnterCritical>
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d6c:	d103      	bne.n	8004d76 <xQueueSemaphoreTake+0x142>
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d82:	d103      	bne.n	8004d8c <xQueueSemaphoreTake+0x158>
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d8c:	f001 f9be 	bl	800610c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d90:	463a      	mov	r2, r7
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fd6d 	bl	8005878 <xTaskCheckForTimeOut>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d132      	bne.n	8004e0a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004da4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004da6:	f000 f8bf 	bl	8004f28 <prvIsQueueEmpty>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d026      	beq.n	8004dfe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004db8:	f001 f976 	bl	80060a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 febd 	bl	8005b40 <xTaskPriorityInherit>
 8004dc6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004dc8:	f001 f9a0 	bl	800610c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	3324      	adds	r3, #36	@ 0x24
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fcaf 	bl	8005738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ddc:	f000 f852 	bl	8004e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004de0:	f000 faf6 	bl	80053d0 <xTaskResumeAll>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f47f af67 	bne.w	8004cba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004dec:	4b18      	ldr	r3, [pc, #96]	@ (8004e50 <xQueueSemaphoreTake+0x21c>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	e75d      	b.n	8004cba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004dfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e00:	f000 f840 	bl	8004e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e04:	f000 fae4 	bl	80053d0 <xTaskResumeAll>
 8004e08:	e757      	b.n	8004cba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e0c:	f000 f83a 	bl	8004e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e10:	f000 fade 	bl	80053d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e16:	f000 f887 	bl	8004f28 <prvIsQueueEmpty>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f43f af4c 	beq.w	8004cba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004e28:	f001 f93e 	bl	80060a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e2e:	f000 f811 	bl	8004e54 <prvGetDisinheritPriorityAfterTimeout>
 8004e32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fef6 	bl	8005c2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e40:	f001 f964 	bl	800610c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3738      	adds	r7, #56	@ 0x38
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d006      	beq.n	8004e72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1c3 0307 	rsb	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e001      	b.n	8004e76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e76:	68fb      	ldr	r3, [r7, #12]
	}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e8c:	f001 f90c 	bl	80060a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e98:	e011      	b.n	8004ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3324      	adds	r3, #36	@ 0x24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fc6c 	bl	8005784 <xTaskRemoveFromEventList>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eb2:	f000 fd45 	bl	8005940 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	dce9      	bgt.n	8004e9a <prvUnlockQueue+0x16>
 8004ec6:	e000      	b.n	8004eca <prvUnlockQueue+0x46>
					break;
 8004ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	22ff      	movs	r2, #255	@ 0xff
 8004ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ed2:	f001 f91b 	bl	800610c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ed6:	f001 f8e7 	bl	80060a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ee2:	e011      	b.n	8004f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d012      	beq.n	8004f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3310      	adds	r3, #16
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fc47 	bl	8005784 <xTaskRemoveFromEventList>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004efc:	f000 fd20 	bl	8005940 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dce9      	bgt.n	8004ee4 <prvUnlockQueue+0x60>
 8004f10:	e000      	b.n	8004f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	22ff      	movs	r2, #255	@ 0xff
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f1c:	f001 f8f6 	bl	800610c <vPortExitCritical>
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f30:	f001 f8ba 	bl	80060a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e001      	b.n	8004f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f46:	f001 f8e1 	bl	800610c <vPortExitCritical>

	return xReturn;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08e      	sub	sp, #56	@ 0x38
 8004f58:	af04      	add	r7, sp, #16
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	623b      	str	r3, [r7, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	bf00      	nop
 8004f7e:	e7fd      	b.n	8004f7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	61fb      	str	r3, [r7, #28]
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	e7fd      	b.n	8004f9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f9e:	2354      	movs	r3, #84	@ 0x54
 8004fa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b54      	cmp	r3, #84	@ 0x54
 8004fa6:	d00b      	beq.n	8004fc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61bb      	str	r3, [r7, #24]
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <xTaskCreateStatic+0xb2>
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01b      	beq.n	8005006 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9303      	str	r3, [sp, #12]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	9302      	str	r3, [sp, #8]
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f850 	bl	800509e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ffe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005000:	f000 f8d6 	bl	80051b0 <prvAddNewTaskToReadyList>
 8005004:	e001      	b.n	800500a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800500a:	697b      	ldr	r3, [r7, #20]
	}
 800500c:	4618      	mov	r0, r3
 800500e:	3728      	adds	r7, #40	@ 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	@ 0x30
 8005018:	af04      	add	r7, sp, #16
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f95f 	bl	80062ec <pvPortMalloc>
 800502e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00e      	beq.n	8005054 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005036:	2054      	movs	r0, #84	@ 0x54
 8005038:	f001 f958 	bl	80062ec <pvPortMalloc>
 800503c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	631a      	str	r2, [r3, #48]	@ 0x30
 800504a:	e005      	b.n	8005058 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f001 fa1b 	bl	8006488 <vPortFree>
 8005052:	e001      	b.n	8005058 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d017      	beq.n	800508e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	2300      	movs	r3, #0
 800506a:	9303      	str	r3, [sp, #12]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	9302      	str	r3, [sp, #8]
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f80e 	bl	800509e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005082:	69f8      	ldr	r0, [r7, #28]
 8005084:	f000 f894 	bl	80051b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e002      	b.n	8005094 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005092:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005094:	69bb      	ldr	r3, [r7, #24]
	}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b088      	sub	sp, #32
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050b6:	3b01      	subs	r3, #1
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f023 0307 	bic.w	r3, r3, #7
 80050c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	617b      	str	r3, [r7, #20]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01f      	beq.n	800512e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e012      	b.n	800511a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	7819      	ldrb	r1, [r3, #0]
 80050fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	3334      	adds	r3, #52	@ 0x34
 8005104:	460a      	mov	r2, r1
 8005106:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d006      	beq.n	8005122 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b0f      	cmp	r3, #15
 800511e:	d9e9      	bls.n	80050f4 <prvInitialiseNewTask+0x56>
 8005120:	e000      	b.n	8005124 <prvInitialiseNewTask+0x86>
			{
				break;
 8005122:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800512c:	e003      	b.n	8005136 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	2b06      	cmp	r3, #6
 800513a:	d901      	bls.n	8005140 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800513c:	2306      	movs	r3, #6
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005144:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	2200      	movs	r2, #0
 8005150:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	3304      	adds	r3, #4
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fb83 	bl	8004862 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	3318      	adds	r3, #24
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fb7e 	bl	8004862 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	f1c3 0207 	rsb	r2, r3, #7
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	2200      	movs	r2, #0
 8005180:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	69b8      	ldr	r0, [r7, #24]
 8005190:	f000 fe56 	bl	8005e40 <pxPortInitialiseStack>
 8005194:	4602      	mov	r2, r0
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a6:	bf00      	nop
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051b8:	f000 ff76 	bl	80060a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005268 <prvAddNewTaskToReadyList+0xb8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a29      	ldr	r2, [pc, #164]	@ (8005268 <prvAddNewTaskToReadyList+0xb8>)
 80051c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051c6:	4b29      	ldr	r3, [pc, #164]	@ (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051ce:	4a27      	ldr	r2, [pc, #156]	@ (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051d4:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <prvAddNewTaskToReadyList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d110      	bne.n	80051fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051dc:	f000 fbd4 	bl	8005988 <prvInitialiseTaskLists>
 80051e0:	e00d      	b.n	80051fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051e2:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <prvAddNewTaskToReadyList+0xc0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051ea:	4b20      	ldr	r3, [pc, #128]	@ (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d802      	bhi.n	80051fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051f8:	4a1c      	ldr	r2, [pc, #112]	@ (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005274 <prvAddNewTaskToReadyList+0xc4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <prvAddNewTaskToReadyList+0xc4>)
 8005206:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <prvAddNewTaskToReadyList+0xc8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <prvAddNewTaskToReadyList+0xc8>)
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4a15      	ldr	r2, [pc, #84]	@ (800527c <prvAddNewTaskToReadyList+0xcc>)
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f7ff fb23 	bl	800487c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005236:	f000 ff69 	bl	800610c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800523a:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <prvAddNewTaskToReadyList+0xc0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00e      	beq.n	8005260 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <prvAddNewTaskToReadyList+0xbc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d207      	bcs.n	8005260 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <prvAddNewTaskToReadyList+0xd0>)
 8005252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	2000085c 	.word	0x2000085c
 800526c:	2000075c 	.word	0x2000075c
 8005270:	20000868 	.word	0x20000868
 8005274:	20000878 	.word	0x20000878
 8005278:	20000864 	.word	0x20000864
 800527c:	20000760 	.word	0x20000760
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d018      	beq.n	80052c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005296:	4b14      	ldr	r3, [pc, #80]	@ (80052e8 <vTaskDelay+0x64>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <vTaskDelay+0x32>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60bb      	str	r3, [r7, #8]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052b6:	f000 f87d 	bl	80053b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052ba:	2100      	movs	r1, #0
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fd59 	bl	8005d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052c2:	f000 f885 	bl	80053d0 <xTaskResumeAll>
 80052c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d107      	bne.n	80052de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80052ce:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <vTaskDelay+0x68>)
 80052d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000884 	.word	0x20000884
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	@ 0x28
 80052f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052fe:	463a      	mov	r2, r7
 8005300:	1d39      	adds	r1, r7, #4
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f7fb f92a 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	9202      	str	r2, [sp, #8]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	2300      	movs	r3, #0
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2300      	movs	r3, #0
 800531c:	460a      	mov	r2, r1
 800531e:	491f      	ldr	r1, [pc, #124]	@ (800539c <vTaskStartScheduler+0xac>)
 8005320:	481f      	ldr	r0, [pc, #124]	@ (80053a0 <vTaskStartScheduler+0xb0>)
 8005322:	f7ff fe17 	bl	8004f54 <xTaskCreateStatic>
 8005326:	4603      	mov	r3, r0
 8005328:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <vTaskStartScheduler+0xb4>)
 800532a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <vTaskStartScheduler+0xb4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005334:	2301      	movs	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e001      	b.n	800533e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d116      	bne.n	8005372 <vTaskStartScheduler+0x82>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	613b      	str	r3, [r7, #16]
}
 8005356:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005358:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <vTaskStartScheduler+0xb8>)
 800535a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800535e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005360:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <vTaskStartScheduler+0xbc>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005366:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <vTaskStartScheduler+0xc0>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800536c:	f000 fdf8 	bl	8005f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005370:	e00f      	b.n	8005392 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005378:	d10b      	bne.n	8005392 <vTaskStartScheduler+0xa2>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	60fb      	str	r3, [r7, #12]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <vTaskStartScheduler+0x9e>
}
 8005392:	bf00      	nop
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	08007c54 	.word	0x08007c54
 80053a0:	08005959 	.word	0x08005959
 80053a4:	20000880 	.word	0x20000880
 80053a8:	2000087c 	.word	0x2000087c
 80053ac:	20000868 	.word	0x20000868
 80053b0:	20000860 	.word	0x20000860

080053b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053b8:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <vTaskSuspendAll+0x18>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	4a03      	ldr	r2, [pc, #12]	@ (80053cc <vTaskSuspendAll+0x18>)
 80053c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000884 	.word	0x20000884

080053d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053de:	4b42      	ldr	r3, [pc, #264]	@ (80054e8 <xTaskResumeAll+0x118>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10b      	bne.n	80053fe <xTaskResumeAll+0x2e>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	603b      	str	r3, [r7, #0]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053fe:	f000 fe53 	bl	80060a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005402:	4b39      	ldr	r3, [pc, #228]	@ (80054e8 <xTaskResumeAll+0x118>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a37      	ldr	r2, [pc, #220]	@ (80054e8 <xTaskResumeAll+0x118>)
 800540a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800540c:	4b36      	ldr	r3, [pc, #216]	@ (80054e8 <xTaskResumeAll+0x118>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d161      	bne.n	80054d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005414:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <xTaskResumeAll+0x11c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05d      	beq.n	80054d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800541c:	e02e      	b.n	800547c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541e:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <xTaskResumeAll+0x120>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3318      	adds	r3, #24
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fa83 	bl	8004936 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3304      	adds	r3, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fa7e 	bl	8004936 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	2201      	movs	r2, #1
 8005440:	409a      	lsls	r2, r3
 8005442:	4b2c      	ldr	r3, [pc, #176]	@ (80054f4 <xTaskResumeAll+0x124>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	4a2a      	ldr	r2, [pc, #168]	@ (80054f4 <xTaskResumeAll+0x124>)
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a27      	ldr	r2, [pc, #156]	@ (80054f8 <xTaskResumeAll+0x128>)
 800545a:	441a      	add	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7ff fa0a 	bl	800487c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	4b23      	ldr	r3, [pc, #140]	@ (80054fc <xTaskResumeAll+0x12c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005476:	4b22      	ldr	r3, [pc, #136]	@ (8005500 <xTaskResumeAll+0x130>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800547c:	4b1c      	ldr	r3, [pc, #112]	@ (80054f0 <xTaskResumeAll+0x120>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1cc      	bne.n	800541e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800548a:	f000 fb1b 	bl	8005ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800548e:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <xTaskResumeAll+0x134>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800549a:	f000 f837 	bl	800550c <xTaskIncrementTick>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054a4:	4b16      	ldr	r3, [pc, #88]	@ (8005500 <xTaskResumeAll+0x130>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f1      	bne.n	800549a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <xTaskResumeAll+0x134>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054bc:	4b10      	ldr	r3, [pc, #64]	@ (8005500 <xTaskResumeAll+0x130>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d009      	beq.n	80054d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005508 <xTaskResumeAll+0x138>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054d8:	f000 fe18 	bl	800610c <vPortExitCritical>

	return xAlreadyYielded;
 80054dc:	68bb      	ldr	r3, [r7, #8]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000884 	.word	0x20000884
 80054ec:	2000085c 	.word	0x2000085c
 80054f0:	2000081c 	.word	0x2000081c
 80054f4:	20000864 	.word	0x20000864
 80054f8:	20000760 	.word	0x20000760
 80054fc:	2000075c 	.word	0x2000075c
 8005500:	20000870 	.word	0x20000870
 8005504:	2000086c 	.word	0x2000086c
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005516:	4b4f      	ldr	r3, [pc, #316]	@ (8005654 <xTaskIncrementTick+0x148>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 808f 	bne.w	800563e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005520:	4b4d      	ldr	r3, [pc, #308]	@ (8005658 <xTaskIncrementTick+0x14c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005528:	4a4b      	ldr	r2, [pc, #300]	@ (8005658 <xTaskIncrementTick+0x14c>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d121      	bne.n	8005578 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005534:	4b49      	ldr	r3, [pc, #292]	@ (800565c <xTaskIncrementTick+0x150>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <xTaskIncrementTick+0x4a>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	603b      	str	r3, [r7, #0]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <xTaskIncrementTick+0x46>
 8005556:	4b41      	ldr	r3, [pc, #260]	@ (800565c <xTaskIncrementTick+0x150>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	4b40      	ldr	r3, [pc, #256]	@ (8005660 <xTaskIncrementTick+0x154>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a3e      	ldr	r2, [pc, #248]	@ (800565c <xTaskIncrementTick+0x150>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4a3e      	ldr	r2, [pc, #248]	@ (8005660 <xTaskIncrementTick+0x154>)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b3e      	ldr	r3, [pc, #248]	@ (8005664 <xTaskIncrementTick+0x158>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	4a3c      	ldr	r2, [pc, #240]	@ (8005664 <xTaskIncrementTick+0x158>)
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	f000 faa6 	bl	8005ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005578:	4b3b      	ldr	r3, [pc, #236]	@ (8005668 <xTaskIncrementTick+0x15c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	d348      	bcc.n	8005614 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005582:	4b36      	ldr	r3, [pc, #216]	@ (800565c <xTaskIncrementTick+0x150>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558c:	4b36      	ldr	r3, [pc, #216]	@ (8005668 <xTaskIncrementTick+0x15c>)
 800558e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005592:	601a      	str	r2, [r3, #0]
					break;
 8005594:	e03e      	b.n	8005614 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005596:	4b31      	ldr	r3, [pc, #196]	@ (800565c <xTaskIncrementTick+0x150>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d203      	bcs.n	80055b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005668 <xTaskIncrementTick+0x15c>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055b4:	e02e      	b.n	8005614 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f9bb 	bl	8004936 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3318      	adds	r3, #24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff f9b2 	bl	8004936 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	2201      	movs	r2, #1
 80055d8:	409a      	lsls	r2, r3
 80055da:	4b24      	ldr	r3, [pc, #144]	@ (800566c <xTaskIncrementTick+0x160>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4313      	orrs	r3, r2
 80055e0:	4a22      	ldr	r2, [pc, #136]	@ (800566c <xTaskIncrementTick+0x160>)
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005670 <xTaskIncrementTick+0x164>)
 80055f2:	441a      	add	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7ff f93e 	bl	800487c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005604:	4b1b      	ldr	r3, [pc, #108]	@ (8005674 <xTaskIncrementTick+0x168>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	d3b9      	bcc.n	8005582 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005612:	e7b6      	b.n	8005582 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005614:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <xTaskIncrementTick+0x168>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	4915      	ldr	r1, [pc, #84]	@ (8005670 <xTaskIncrementTick+0x164>)
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d901      	bls.n	8005630 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005630:	4b11      	ldr	r3, [pc, #68]	@ (8005678 <xTaskIncrementTick+0x16c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005638:	2301      	movs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e004      	b.n	8005648 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800563e:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <xTaskIncrementTick+0x170>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a0d      	ldr	r2, [pc, #52]	@ (800567c <xTaskIncrementTick+0x170>)
 8005646:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000884 	.word	0x20000884
 8005658:	20000860 	.word	0x20000860
 800565c:	20000814 	.word	0x20000814
 8005660:	20000818 	.word	0x20000818
 8005664:	20000874 	.word	0x20000874
 8005668:	2000087c 	.word	0x2000087c
 800566c:	20000864 	.word	0x20000864
 8005670:	20000760 	.word	0x20000760
 8005674:	2000075c 	.word	0x2000075c
 8005678:	20000870 	.word	0x20000870
 800567c:	2000086c 	.word	0x2000086c

08005680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005686:	4b27      	ldr	r3, [pc, #156]	@ (8005724 <vTaskSwitchContext+0xa4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800568e:	4b26      	ldr	r3, [pc, #152]	@ (8005728 <vTaskSwitchContext+0xa8>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005694:	e040      	b.n	8005718 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005696:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <vTaskSwitchContext+0xa8>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569c:	4b23      	ldr	r3, [pc, #140]	@ (800572c <vTaskSwitchContext+0xac>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056aa:	7afb      	ldrb	r3, [r7, #11]
 80056ac:	f1c3 031f 	rsb	r3, r3, #31
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	491f      	ldr	r1, [pc, #124]	@ (8005730 <vTaskSwitchContext+0xb0>)
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <vTaskSwitchContext+0x5e>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	607b      	str	r3, [r7, #4]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <vTaskSwitchContext+0x5a>
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4a11      	ldr	r2, [pc, #68]	@ (8005730 <vTaskSwitchContext+0xb0>)
 80056ea:	4413      	add	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	605a      	str	r2, [r3, #4]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3308      	adds	r3, #8
 8005700:	429a      	cmp	r2, r3
 8005702:	d104      	bne.n	800570e <vTaskSwitchContext+0x8e>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a07      	ldr	r2, [pc, #28]	@ (8005734 <vTaskSwitchContext+0xb4>)
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	20000884 	.word	0x20000884
 8005728:	20000870 	.word	0x20000870
 800572c:	20000864 	.word	0x20000864
 8005730:	20000760 	.word	0x20000760
 8005734:	2000075c 	.word	0x2000075c

08005738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	60fb      	str	r3, [r7, #12]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005760:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <vTaskPlaceOnEventList+0x48>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3318      	adds	r3, #24
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff f8ab 	bl	80048c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800576e:	2101      	movs	r1, #1
 8005770:	6838      	ldr	r0, [r7, #0]
 8005772:	f000 faff 	bl	8005d74 <prvAddCurrentTaskToDelayedList>
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	2000075c 	.word	0x2000075c

08005784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	60fb      	str	r3, [r7, #12]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3318      	adds	r3, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff f8bd 	bl	8004936 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <xTaskRemoveFromEventList+0xb0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11c      	bne.n	80057fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff f8b4 	bl	8004936 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	4b18      	ldr	r3, [pc, #96]	@ (8005838 <xTaskRemoveFromEventList+0xb4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <xTaskRemoveFromEventList+0xb4>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4a13      	ldr	r2, [pc, #76]	@ (800583c <xTaskRemoveFromEventList+0xb8>)
 80057ee:	441a      	add	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7ff f840 	bl	800487c <vListInsertEnd>
 80057fc:	e005      	b.n	800580a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3318      	adds	r3, #24
 8005802:	4619      	mov	r1, r3
 8005804:	480e      	ldr	r0, [pc, #56]	@ (8005840 <xTaskRemoveFromEventList+0xbc>)
 8005806:	f7ff f839 	bl	800487c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580e:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <xTaskRemoveFromEventList+0xc0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	429a      	cmp	r2, r3
 8005816:	d905      	bls.n	8005824 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <xTaskRemoveFromEventList+0xc4>)
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e001      	b.n	8005828 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005828:	697b      	ldr	r3, [r7, #20]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000884 	.word	0x20000884
 8005838:	20000864 	.word	0x20000864
 800583c:	20000760 	.word	0x20000760
 8005840:	2000081c 	.word	0x2000081c
 8005844:	2000075c 	.word	0x2000075c
 8005848:	20000870 	.word	0x20000870

0800584c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <vTaskInternalSetTimeOutState+0x24>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800585c:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <vTaskInternalSetTimeOutState+0x28>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000874 	.word	0x20000874
 8005874:	20000860 	.word	0x20000860

08005878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10b      	bne.n	80058a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	613b      	str	r3, [r7, #16]
}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	e7fd      	b.n	800589c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60fb      	str	r3, [r7, #12]
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	e7fd      	b.n	80058ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80058be:	f000 fbf3 	bl	80060a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <xTaskCheckForTimeOut+0xc0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058da:	d102      	bne.n	80058e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e023      	b.n	800592a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b15      	ldr	r3, [pc, #84]	@ (800593c <xTaskCheckForTimeOut+0xc4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d007      	beq.n	80058fe <xTaskCheckForTimeOut+0x86>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	e015      	b.n	800592a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	429a      	cmp	r2, r3
 8005906:	d20b      	bcs.n	8005920 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff99 	bl	800584c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	e004      	b.n	800592a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005926:	2301      	movs	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800592a:	f000 fbef 	bl	800610c <vPortExitCritical>

	return xReturn;
 800592e:	69fb      	ldr	r3, [r7, #28]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000860 	.word	0x20000860
 800593c:	20000874 	.word	0x20000874

08005940 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005944:	4b03      	ldr	r3, [pc, #12]	@ (8005954 <vTaskMissedYield+0x14>)
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]
}
 800594a:	bf00      	nop
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000870 	.word	0x20000870

08005958 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005960:	f000 f852 	bl	8005a08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <prvIdleTask+0x28>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d9f9      	bls.n	8005960 <prvIdleTask+0x8>
			{
				taskYIELD();
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <prvIdleTask+0x2c>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800597c:	e7f0      	b.n	8005960 <prvIdleTask+0x8>
 800597e:	bf00      	nop
 8005980:	20000760 	.word	0x20000760
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	e00c      	b.n	80059ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a12      	ldr	r2, [pc, #72]	@ (80059e8 <prvInitialiseTaskLists+0x60>)
 80059a0:	4413      	add	r3, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe ff3d 	bl	8004822 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3301      	adds	r3, #1
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b06      	cmp	r3, #6
 80059b2:	d9ef      	bls.n	8005994 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059b4:	480d      	ldr	r0, [pc, #52]	@ (80059ec <prvInitialiseTaskLists+0x64>)
 80059b6:	f7fe ff34 	bl	8004822 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ba:	480d      	ldr	r0, [pc, #52]	@ (80059f0 <prvInitialiseTaskLists+0x68>)
 80059bc:	f7fe ff31 	bl	8004822 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059c0:	480c      	ldr	r0, [pc, #48]	@ (80059f4 <prvInitialiseTaskLists+0x6c>)
 80059c2:	f7fe ff2e 	bl	8004822 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059c6:	480c      	ldr	r0, [pc, #48]	@ (80059f8 <prvInitialiseTaskLists+0x70>)
 80059c8:	f7fe ff2b 	bl	8004822 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059cc:	480b      	ldr	r0, [pc, #44]	@ (80059fc <prvInitialiseTaskLists+0x74>)
 80059ce:	f7fe ff28 	bl	8004822 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <prvInitialiseTaskLists+0x78>)
 80059d4:	4a05      	ldr	r2, [pc, #20]	@ (80059ec <prvInitialiseTaskLists+0x64>)
 80059d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <prvInitialiseTaskLists+0x7c>)
 80059da:	4a05      	ldr	r2, [pc, #20]	@ (80059f0 <prvInitialiseTaskLists+0x68>)
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000760 	.word	0x20000760
 80059ec:	200007ec 	.word	0x200007ec
 80059f0:	20000800 	.word	0x20000800
 80059f4:	2000081c 	.word	0x2000081c
 80059f8:	20000830 	.word	0x20000830
 80059fc:	20000848 	.word	0x20000848
 8005a00:	20000814 	.word	0x20000814
 8005a04:	20000818 	.word	0x20000818

08005a08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a0e:	e019      	b.n	8005a44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a10:	f000 fb4a 	bl	80060a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <prvCheckTasksWaitingTermination+0x50>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe ff88 	bl	8004936 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a26:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <prvCheckTasksWaitingTermination+0x54>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005a5c <prvCheckTasksWaitingTermination+0x54>)
 8005a2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <prvCheckTasksWaitingTermination+0x58>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	4a0a      	ldr	r2, [pc, #40]	@ (8005a60 <prvCheckTasksWaitingTermination+0x58>)
 8005a38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a3a:	f000 fb67 	bl	800610c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f810 	bl	8005a64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a44:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <prvCheckTasksWaitingTermination+0x58>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e1      	bne.n	8005a10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000830 	.word	0x20000830
 8005a5c:	2000085c 	.word	0x2000085c
 8005a60:	20000844 	.word	0x20000844

08005a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d108      	bne.n	8005a88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fd04 	bl	8006488 <vPortFree>
				vPortFree( pxTCB );
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd01 	bl	8006488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a86:	e019      	b.n	8005abc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d103      	bne.n	8005a9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fcf8 	bl	8006488 <vPortFree>
	}
 8005a98:	e010      	b.n	8005abc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d00b      	beq.n	8005abc <prvDeleteTCB+0x58>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <prvDeleteTCB+0x54>
	}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aca:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <prvResetNextTaskUnblockTime+0x38>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <prvResetNextTaskUnblockTime+0x3c>)
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005adc:	e008      	b.n	8005af0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ade:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <prvResetNextTaskUnblockTime+0x38>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a04      	ldr	r2, [pc, #16]	@ (8005b00 <prvResetNextTaskUnblockTime+0x3c>)
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000814 	.word	0x20000814
 8005b00:	2000087c 	.word	0x2000087c

08005b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <xTaskGetSchedulerState+0x34>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b12:	2301      	movs	r3, #1
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e008      	b.n	8005b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b18:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <xTaskGetSchedulerState+0x38>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b20:	2302      	movs	r3, #2
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	e001      	b.n	8005b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b2a:	687b      	ldr	r3, [r7, #4]
	}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	20000868 	.word	0x20000868
 8005b3c:	20000884 	.word	0x20000884

08005b40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d05e      	beq.n	8005c14 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5a:	4b31      	ldr	r3, [pc, #196]	@ (8005c20 <xTaskPriorityInherit+0xe0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d24e      	bcs.n	8005c02 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db06      	blt.n	8005b7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <xTaskPriorityInherit+0xe0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	f1c3 0207 	rsb	r2, r3, #7
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6959      	ldr	r1, [r3, #20]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a26      	ldr	r2, [pc, #152]	@ (8005c24 <xTaskPriorityInherit+0xe4>)
 8005b8c:	4413      	add	r3, r2
 8005b8e:	4299      	cmp	r1, r3
 8005b90:	d12f      	bne.n	8005bf2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fecd 	bl	8004936 <uxListRemove>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43da      	mvns	r2, r3
 8005bae:	4b1e      	ldr	r3, [pc, #120]	@ (8005c28 <xTaskPriorityInherit+0xe8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c28 <xTaskPriorityInherit+0xe8>)
 8005bb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bb8:	4b19      	ldr	r3, [pc, #100]	@ (8005c20 <xTaskPriorityInherit+0xe0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	4b17      	ldr	r3, [pc, #92]	@ (8005c28 <xTaskPriorityInherit+0xe8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	4a15      	ldr	r2, [pc, #84]	@ (8005c28 <xTaskPriorityInherit+0xe8>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4a10      	ldr	r2, [pc, #64]	@ (8005c24 <xTaskPriorityInherit+0xe4>)
 8005be2:	441a      	add	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f7fe fe46 	bl	800487c <vListInsertEnd>
 8005bf0:	e004      	b.n	8005bfc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <xTaskPriorityInherit+0xe0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e008      	b.n	8005c14 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c06:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <xTaskPriorityInherit+0xe0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d201      	bcs.n	8005c14 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c10:	2301      	movs	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c14:	68fb      	ldr	r3, [r7, #12]
	}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	2000075c 	.word	0x2000075c
 8005c24:	20000760 	.word	0x20000760
 8005c28:	20000864 	.word	0x20000864

08005c2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d079      	beq.n	8005d38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10b      	bne.n	8005c64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60fb      	str	r3, [r7, #12]
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d902      	bls.n	8005c74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e002      	b.n	8005c7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d059      	beq.n	8005d38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d154      	bne.n	8005d38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d10b      	bne.n	8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60bb      	str	r3, [r7, #8]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	db04      	blt.n	8005cce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f1c3 0207 	rsb	r2, r3, #7
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4a19      	ldr	r2, [pc, #100]	@ (8005d44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005cde:	4413      	add	r3, r2
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	d129      	bne.n	8005d38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fe24 	bl	8004936 <uxListRemove>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4013      	ands	r3, r2
 8005d06:	4a10      	ldr	r2, [pc, #64]	@ (8005d48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	2201      	movs	r2, #1
 8005d10:	409a      	lsls	r2, r3
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	4a0b      	ldr	r2, [pc, #44]	@ (8005d48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4a06      	ldr	r2, [pc, #24]	@ (8005d44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005d2a:	441a      	add	r2, r3
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fe fda2 	bl	800487c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d38:	bf00      	nop
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	2000075c 	.word	0x2000075c
 8005d44:	20000760 	.word	0x20000760
 8005d48:	20000864 	.word	0x20000864

08005d4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d50:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d5e:	3201      	adds	r2, #1
 8005d60:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005d62:	4b03      	ldr	r3, [pc, #12]	@ (8005d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d64:	681b      	ldr	r3, [r3, #0]
	}
 8005d66:	4618      	mov	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	2000075c 	.word	0x2000075c

08005d74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d7e:	4b29      	ldr	r3, [pc, #164]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d84:	4b28      	ldr	r3, [pc, #160]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fdd3 	bl	8004936 <uxListRemove>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10b      	bne.n	8005dae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d96:	4b24      	ldr	r3, [pc, #144]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	4b21      	ldr	r3, [pc, #132]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4013      	ands	r3, r2
 8005daa:	4a20      	ldr	r2, [pc, #128]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005db4:	d10a      	bne.n	8005dcc <prvAddCurrentTaskToDelayedList+0x58>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	481a      	ldr	r0, [pc, #104]	@ (8005e30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dc6:	f7fe fd59 	bl	800487c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dca:	e026      	b.n	8005e1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dd4:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d209      	bcs.n	8005df8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de4:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f7fe fd67 	bl	80048c4 <vListInsert>
}
 8005df6:	e010      	b.n	8005e1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7fe fd5d 	bl	80048c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d202      	bcs.n	8005e1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e14:	4a09      	ldr	r2, [pc, #36]	@ (8005e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6013      	str	r3, [r2, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000860 	.word	0x20000860
 8005e28:	2000075c 	.word	0x2000075c
 8005e2c:	20000864 	.word	0x20000864
 8005e30:	20000848 	.word	0x20000848
 8005e34:	20000818 	.word	0x20000818
 8005e38:	20000814 	.word	0x20000814
 8005e3c:	2000087c 	.word	0x2000087c

08005e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b04      	subs	r3, #4
 8005e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f023 0201 	bic.w	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e70:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea4 <pxPortInitialiseStack+0x64>)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b14      	subs	r3, #20
 8005e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3b04      	subs	r3, #4
 8005e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f06f 0202 	mvn.w	r2, #2
 8005e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3b20      	subs	r3, #32
 8005e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	08005ea9 	.word	0x08005ea9

08005ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eb2:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <prvTaskExitError+0x58>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eba:	d00b      	beq.n	8005ed4 <prvTaskExitError+0x2c>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60fb      	str	r3, [r7, #12]
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <prvTaskExitError+0x28>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60bb      	str	r3, [r7, #8]
}
 8005ee6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ee8:	bf00      	nop
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0fc      	beq.n	8005eea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000014 	.word	0x20000014
	...

08005f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f10:	4b07      	ldr	r3, [pc, #28]	@ (8005f30 <pxCurrentTCBConst2>)
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	6808      	ldr	r0, [r1, #0]
 8005f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	f380 8809 	msr	PSP, r0
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8811 	msr	BASEPRI, r0
 8005f2a:	4770      	bx	lr
 8005f2c:	f3af 8000 	nop.w

08005f30 <pxCurrentTCBConst2>:
 8005f30:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop

08005f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f38:	4808      	ldr	r0, [pc, #32]	@ (8005f5c <prvPortStartFirstTask+0x24>)
 8005f3a:	6800      	ldr	r0, [r0, #0]
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f380 8808 	msr	MSP, r0
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8814 	msr	CONTROL, r0
 8005f4a:	b662      	cpsie	i
 8005f4c:	b661      	cpsie	f
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	df00      	svc	0
 8005f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f5a:	bf00      	nop
 8005f5c:	e000ed08 	.word	0xe000ed08

08005f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f66:	4b47      	ldr	r3, [pc, #284]	@ (8006084 <xPortStartScheduler+0x124>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a47      	ldr	r2, [pc, #284]	@ (8006088 <xPortStartScheduler+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10b      	bne.n	8005f88 <xPortStartScheduler+0x28>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	613b      	str	r3, [r7, #16]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f88:	4b3e      	ldr	r3, [pc, #248]	@ (8006084 <xPortStartScheduler+0x124>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800608c <xPortStartScheduler+0x12c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10b      	bne.n	8005faa <xPortStartScheduler+0x4a>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	60fb      	str	r3, [r7, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005faa:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <xPortStartScheduler+0x130>)
 8005fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	22ff      	movs	r2, #255	@ 0xff
 8005fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4b31      	ldr	r3, [pc, #196]	@ (8006094 <xPortStartScheduler+0x134>)
 8005fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fd2:	4b31      	ldr	r3, [pc, #196]	@ (8006098 <xPortStartScheduler+0x138>)
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fd8:	e009      	b.n	8005fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005fda:	4b2f      	ldr	r3, [pc, #188]	@ (8006098 <xPortStartScheduler+0x138>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8006098 <xPortStartScheduler+0x138>)
 8005fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff6:	2b80      	cmp	r3, #128	@ 0x80
 8005ff8:	d0ef      	beq.n	8005fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ffa:	4b27      	ldr	r3, [pc, #156]	@ (8006098 <xPortStartScheduler+0x138>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f1c3 0307 	rsb	r3, r3, #7
 8006002:	2b04      	cmp	r3, #4
 8006004:	d00b      	beq.n	800601e <xPortStartScheduler+0xbe>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60bb      	str	r3, [r7, #8]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800601e:	4b1e      	ldr	r3, [pc, #120]	@ (8006098 <xPortStartScheduler+0x138>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4a1c      	ldr	r2, [pc, #112]	@ (8006098 <xPortStartScheduler+0x138>)
 8006026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006028:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <xPortStartScheduler+0x138>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006030:	4a19      	ldr	r2, [pc, #100]	@ (8006098 <xPortStartScheduler+0x138>)
 8006032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800603c:	4b17      	ldr	r3, [pc, #92]	@ (800609c <xPortStartScheduler+0x13c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a16      	ldr	r2, [pc, #88]	@ (800609c <xPortStartScheduler+0x13c>)
 8006042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006048:	4b14      	ldr	r3, [pc, #80]	@ (800609c <xPortStartScheduler+0x13c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a13      	ldr	r2, [pc, #76]	@ (800609c <xPortStartScheduler+0x13c>)
 800604e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006054:	f000 f8da 	bl	800620c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006058:	4b11      	ldr	r3, [pc, #68]	@ (80060a0 <xPortStartScheduler+0x140>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800605e:	f000 f8f9 	bl	8006254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006062:	4b10      	ldr	r3, [pc, #64]	@ (80060a4 <xPortStartScheduler+0x144>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a0f      	ldr	r2, [pc, #60]	@ (80060a4 <xPortStartScheduler+0x144>)
 8006068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800606c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800606e:	f7ff ff63 	bl	8005f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006072:	f7ff fb05 	bl	8005680 <vTaskSwitchContext>
	prvTaskExitError();
 8006076:	f7ff ff17 	bl	8005ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	e000ed00 	.word	0xe000ed00
 8006088:	410fc271 	.word	0x410fc271
 800608c:	410fc270 	.word	0x410fc270
 8006090:	e000e400 	.word	0xe000e400
 8006094:	20000888 	.word	0x20000888
 8006098:	2000088c 	.word	0x2000088c
 800609c:	e000ed20 	.word	0xe000ed20
 80060a0:	20000014 	.word	0x20000014
 80060a4:	e000ef34 	.word	0xe000ef34

080060a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	607b      	str	r3, [r7, #4]
}
 80060c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060c2:	4b10      	ldr	r3, [pc, #64]	@ (8006104 <vPortEnterCritical+0x5c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3301      	adds	r3, #1
 80060c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006104 <vPortEnterCritical+0x5c>)
 80060ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <vPortEnterCritical+0x5c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d110      	bne.n	80060f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <vPortEnterCritical+0x60>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	603b      	str	r3, [r7, #0]
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	e7fd      	b.n	80060f2 <vPortEnterCritical+0x4a>
	}
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000014 	.word	0x20000014
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006112:	4b12      	ldr	r3, [pc, #72]	@ (800615c <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <vPortExitCritical+0x26>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	607b      	str	r3, [r7, #4]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <vPortExitCritical+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3b01      	subs	r3, #1
 8006138:	4a08      	ldr	r2, [pc, #32]	@ (800615c <vPortExitCritical+0x50>)
 800613a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <vPortExitCritical+0x50>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <vPortExitCritical+0x44>
 8006144:	2300      	movs	r3, #0
 8006146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f383 8811 	msr	BASEPRI, r3
}
 800614e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	20000014 	.word	0x20000014

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <pxCurrentTCBConst>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f01e 0f10 	tst.w	lr, #16
 8006170:	bf08      	it	eq
 8006172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006184:	f380 8811 	msr	BASEPRI, r0
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f7ff fa76 	bl	8005680 <vTaskSwitchContext>
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f380 8811 	msr	BASEPRI, r0
 800619c:	bc09      	pop	{r0, r3}
 800619e:	6819      	ldr	r1, [r3, #0]
 80061a0:	6808      	ldr	r0, [r1, #0]
 80061a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	f01e 0f10 	tst.w	lr, #16
 80061aa:	bf08      	it	eq
 80061ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061b0:	f380 8809 	msr	PSP, r0
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst>:
 80061c0:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061e2:	f7ff f993 	bl	800550c <xTaskIncrementTick>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <xPortSysTickHandler+0x40>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
}
 80061fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006216:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <vPortSetupTimerInterrupt+0x38>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <vPortSetupTimerInterrupt+0x3c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <vPortSetupTimerInterrupt+0x40>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a09      	ldr	r2, [pc, #36]	@ (8006250 <vPortSetupTimerInterrupt+0x44>)
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800622e:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010
 8006244:	e000e018 	.word	0xe000e018
 8006248:	20000000 	.word	0x20000000
 800624c:	10624dd3 	.word	0x10624dd3
 8006250:	e000e014 	.word	0xe000e014

08006254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006264 <vPortEnableVFP+0x10>
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800625e:	6001      	str	r1, [r0, #0]
 8006260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006262:	bf00      	nop
 8006264:	e000ed88 	.word	0xe000ed88

08006268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800626e:	f3ef 8305 	mrs	r3, IPSR
 8006272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d915      	bls.n	80062a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800627a:	4a18      	ldr	r2, [pc, #96]	@ (80062dc <vPortValidateInterruptPriority+0x74>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006284:	4b16      	ldr	r3, [pc, #88]	@ (80062e0 <vPortValidateInterruptPriority+0x78>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	7afa      	ldrb	r2, [r7, #11]
 800628a:	429a      	cmp	r2, r3
 800628c:	d20b      	bcs.n	80062a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062a6:	4b0f      	ldr	r3, [pc, #60]	@ (80062e4 <vPortValidateInterruptPriority+0x7c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062ae:	4b0e      	ldr	r3, [pc, #56]	@ (80062e8 <vPortValidateInterruptPriority+0x80>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d90b      	bls.n	80062ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	603b      	str	r3, [r7, #0]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <vPortValidateInterruptPriority+0x62>
	}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	e000e3f0 	.word	0xe000e3f0
 80062e0:	20000888 	.word	0x20000888
 80062e4:	e000ed0c 	.word	0xe000ed0c
 80062e8:	2000088c 	.word	0x2000088c

080062ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	@ 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062f8:	f7ff f85c 	bl	80053b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006470 <pvPortMalloc+0x184>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006304:	f000 f924 	bl	8006550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006308:	4b5a      	ldr	r3, [pc, #360]	@ (8006474 <pvPortMalloc+0x188>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 8095 	bne.w	8006440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01e      	beq.n	800635a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800631c:	2208      	movs	r2, #8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	2b00      	cmp	r3, #0
 800632c:	d015      	beq.n	800635a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f023 0307 	bic.w	r3, r3, #7
 8006334:	3308      	adds	r3, #8
 8006336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <pvPortMalloc+0x6e>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	617b      	str	r3, [r7, #20]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d06f      	beq.n	8006440 <pvPortMalloc+0x154>
 8006360:	4b45      	ldr	r3, [pc, #276]	@ (8006478 <pvPortMalloc+0x18c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	429a      	cmp	r2, r3
 8006368:	d86a      	bhi.n	8006440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800636a:	4b44      	ldr	r3, [pc, #272]	@ (800647c <pvPortMalloc+0x190>)
 800636c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800636e:	4b43      	ldr	r3, [pc, #268]	@ (800647c <pvPortMalloc+0x190>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006374:	e004      	b.n	8006380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d903      	bls.n	8006392 <pvPortMalloc+0xa6>
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f1      	bne.n	8006376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006392:	4b37      	ldr	r3, [pc, #220]	@ (8006470 <pvPortMalloc+0x184>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006398:	429a      	cmp	r2, r3
 800639a:	d051      	beq.n	8006440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2208      	movs	r2, #8
 80063a2:	4413      	add	r3, r2
 80063a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	1ad2      	subs	r2, r2, r3
 80063b6:	2308      	movs	r3, #8
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d920      	bls.n	8006400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <pvPortMalloc+0xfc>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	e7fd      	b.n	80063e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063fa:	69b8      	ldr	r0, [r7, #24]
 80063fc:	f000 f90a 	bl	8006614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006400:	4b1d      	ldr	r3, [pc, #116]	@ (8006478 <pvPortMalloc+0x18c>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	4a1b      	ldr	r2, [pc, #108]	@ (8006478 <pvPortMalloc+0x18c>)
 800640c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800640e:	4b1a      	ldr	r3, [pc, #104]	@ (8006478 <pvPortMalloc+0x18c>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b1b      	ldr	r3, [pc, #108]	@ (8006480 <pvPortMalloc+0x194>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d203      	bcs.n	8006422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800641a:	4b17      	ldr	r3, [pc, #92]	@ (8006478 <pvPortMalloc+0x18c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <pvPortMalloc+0x194>)
 8006420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	4b13      	ldr	r3, [pc, #76]	@ (8006474 <pvPortMalloc+0x188>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	431a      	orrs	r2, r3
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006436:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <pvPortMalloc+0x198>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a11      	ldr	r2, [pc, #68]	@ (8006484 <pvPortMalloc+0x198>)
 800643e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006440:	f7fe ffc6 	bl	80053d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <pvPortMalloc+0x17a>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60fb      	str	r3, [r7, #12]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <pvPortMalloc+0x176>
	return pvReturn;
 8006466:	69fb      	ldr	r3, [r7, #28]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3728      	adds	r7, #40	@ 0x28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20001450 	.word	0x20001450
 8006474:	20001464 	.word	0x20001464
 8006478:	20001454 	.word	0x20001454
 800647c:	20001448 	.word	0x20001448
 8006480:	20001458 	.word	0x20001458
 8006484:	2000145c 	.word	0x2000145c

08006488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d04f      	beq.n	800653a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800649a:	2308      	movs	r3, #8
 800649c:	425b      	negs	r3, r3
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b25      	ldr	r3, [pc, #148]	@ (8006544 <vPortFree+0xbc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <vPortFree+0x46>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60fb      	str	r3, [r7, #12]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <vPortFree+0x66>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60bb      	str	r3, [r7, #8]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <vPortFree+0xbc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01e      	beq.n	800653a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11a      	bne.n	800653a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <vPortFree+0xbc>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	43db      	mvns	r3, r3
 800650e:	401a      	ands	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006514:	f7fe ff4e 	bl	80053b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <vPortFree+0xc0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4413      	add	r3, r2
 8006522:	4a09      	ldr	r2, [pc, #36]	@ (8006548 <vPortFree+0xc0>)
 8006524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006526:	6938      	ldr	r0, [r7, #16]
 8006528:	f000 f874 	bl	8006614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <vPortFree+0xc4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a06      	ldr	r2, [pc, #24]	@ (800654c <vPortFree+0xc4>)
 8006534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006536:	f7fe ff4b 	bl	80053d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20001464 	.word	0x20001464
 8006548:	20001454 	.word	0x20001454
 800654c:	20001460 	.word	0x20001460

08006550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006556:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800655a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800655c:	4b27      	ldr	r3, [pc, #156]	@ (80065fc <prvHeapInit+0xac>)
 800655e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3307      	adds	r3, #7
 800656e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0307 	bic.w	r3, r3, #7
 8006576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	4a1f      	ldr	r2, [pc, #124]	@ (80065fc <prvHeapInit+0xac>)
 8006580:	4413      	add	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006588:	4a1d      	ldr	r2, [pc, #116]	@ (8006600 <prvHeapInit+0xb0>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800658e:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <prvHeapInit+0xb0>)
 8006590:	2200      	movs	r2, #0
 8006592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	4413      	add	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800659c:	2208      	movs	r2, #8
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4a15      	ldr	r2, [pc, #84]	@ (8006604 <prvHeapInit+0xb4>)
 80065b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <prvHeapInit+0xb4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ba:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <prvHeapInit+0xb4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <prvHeapInit+0xb4>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006608 <prvHeapInit+0xb8>)
 80065de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4a09      	ldr	r2, [pc, #36]	@ (800660c <prvHeapInit+0xbc>)
 80065e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065e8:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <prvHeapInit+0xc0>)
 80065ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80065ee:	601a      	str	r2, [r3, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20000890 	.word	0x20000890
 8006600:	20001448 	.word	0x20001448
 8006604:	20001450 	.word	0x20001450
 8006608:	20001458 	.word	0x20001458
 800660c:	20001454 	.word	0x20001454
 8006610:	20001464 	.word	0x20001464

08006614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800661c:	4b28      	ldr	r3, [pc, #160]	@ (80066c0 <prvInsertBlockIntoFreeList+0xac>)
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e002      	b.n	8006628 <prvInsertBlockIntoFreeList+0x14>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d8f7      	bhi.n	8006622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4413      	add	r3, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	429a      	cmp	r2, r3
 8006642:	d108      	bne.n	8006656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	441a      	add	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d118      	bne.n	800669c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d00d      	beq.n	8006692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	441a      	add	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e008      	b.n	80066a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006692:	4b0c      	ldr	r3, [pc, #48]	@ (80066c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e003      	b.n	80066a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d002      	beq.n	80066b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20001448 	.word	0x20001448
 80066c4:	20001450 	.word	0x20001450

080066c8 <atoi>:
 80066c8:	220a      	movs	r2, #10
 80066ca:	2100      	movs	r1, #0
 80066cc:	f000 b87a 	b.w	80067c4 <strtol>

080066d0 <_strtol_l.constprop.0>:
 80066d0:	2b24      	cmp	r3, #36	@ 0x24
 80066d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d6:	4686      	mov	lr, r0
 80066d8:	4690      	mov	r8, r2
 80066da:	d801      	bhi.n	80066e0 <_strtol_l.constprop.0+0x10>
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d106      	bne.n	80066ee <_strtol_l.constprop.0+0x1e>
 80066e0:	f000 fb06 	bl	8006cf0 <__errno>
 80066e4:	2316      	movs	r3, #22
 80066e6:	6003      	str	r3, [r0, #0]
 80066e8:	2000      	movs	r0, #0
 80066ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ee:	4834      	ldr	r0, [pc, #208]	@ (80067c0 <_strtol_l.constprop.0+0xf0>)
 80066f0:	460d      	mov	r5, r1
 80066f2:	462a      	mov	r2, r5
 80066f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066f8:	5d06      	ldrb	r6, [r0, r4]
 80066fa:	f016 0608 	ands.w	r6, r6, #8
 80066fe:	d1f8      	bne.n	80066f2 <_strtol_l.constprop.0+0x22>
 8006700:	2c2d      	cmp	r4, #45	@ 0x2d
 8006702:	d12d      	bne.n	8006760 <_strtol_l.constprop.0+0x90>
 8006704:	782c      	ldrb	r4, [r5, #0]
 8006706:	2601      	movs	r6, #1
 8006708:	1c95      	adds	r5, r2, #2
 800670a:	f033 0210 	bics.w	r2, r3, #16
 800670e:	d109      	bne.n	8006724 <_strtol_l.constprop.0+0x54>
 8006710:	2c30      	cmp	r4, #48	@ 0x30
 8006712:	d12a      	bne.n	800676a <_strtol_l.constprop.0+0x9a>
 8006714:	782a      	ldrb	r2, [r5, #0]
 8006716:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800671a:	2a58      	cmp	r2, #88	@ 0x58
 800671c:	d125      	bne.n	800676a <_strtol_l.constprop.0+0x9a>
 800671e:	786c      	ldrb	r4, [r5, #1]
 8006720:	2310      	movs	r3, #16
 8006722:	3502      	adds	r5, #2
 8006724:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006728:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800672c:	2200      	movs	r2, #0
 800672e:	fbbc f9f3 	udiv	r9, ip, r3
 8006732:	4610      	mov	r0, r2
 8006734:	fb03 ca19 	mls	sl, r3, r9, ip
 8006738:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800673c:	2f09      	cmp	r7, #9
 800673e:	d81b      	bhi.n	8006778 <_strtol_l.constprop.0+0xa8>
 8006740:	463c      	mov	r4, r7
 8006742:	42a3      	cmp	r3, r4
 8006744:	dd27      	ble.n	8006796 <_strtol_l.constprop.0+0xc6>
 8006746:	1c57      	adds	r7, r2, #1
 8006748:	d007      	beq.n	800675a <_strtol_l.constprop.0+0x8a>
 800674a:	4581      	cmp	r9, r0
 800674c:	d320      	bcc.n	8006790 <_strtol_l.constprop.0+0xc0>
 800674e:	d101      	bne.n	8006754 <_strtol_l.constprop.0+0x84>
 8006750:	45a2      	cmp	sl, r4
 8006752:	db1d      	blt.n	8006790 <_strtol_l.constprop.0+0xc0>
 8006754:	fb00 4003 	mla	r0, r0, r3, r4
 8006758:	2201      	movs	r2, #1
 800675a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800675e:	e7eb      	b.n	8006738 <_strtol_l.constprop.0+0x68>
 8006760:	2c2b      	cmp	r4, #43	@ 0x2b
 8006762:	bf04      	itt	eq
 8006764:	782c      	ldrbeq	r4, [r5, #0]
 8006766:	1c95      	addeq	r5, r2, #2
 8006768:	e7cf      	b.n	800670a <_strtol_l.constprop.0+0x3a>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1da      	bne.n	8006724 <_strtol_l.constprop.0+0x54>
 800676e:	2c30      	cmp	r4, #48	@ 0x30
 8006770:	bf0c      	ite	eq
 8006772:	2308      	moveq	r3, #8
 8006774:	230a      	movne	r3, #10
 8006776:	e7d5      	b.n	8006724 <_strtol_l.constprop.0+0x54>
 8006778:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800677c:	2f19      	cmp	r7, #25
 800677e:	d801      	bhi.n	8006784 <_strtol_l.constprop.0+0xb4>
 8006780:	3c37      	subs	r4, #55	@ 0x37
 8006782:	e7de      	b.n	8006742 <_strtol_l.constprop.0+0x72>
 8006784:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006788:	2f19      	cmp	r7, #25
 800678a:	d804      	bhi.n	8006796 <_strtol_l.constprop.0+0xc6>
 800678c:	3c57      	subs	r4, #87	@ 0x57
 800678e:	e7d8      	b.n	8006742 <_strtol_l.constprop.0+0x72>
 8006790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006794:	e7e1      	b.n	800675a <_strtol_l.constprop.0+0x8a>
 8006796:	1c53      	adds	r3, r2, #1
 8006798:	d108      	bne.n	80067ac <_strtol_l.constprop.0+0xdc>
 800679a:	2322      	movs	r3, #34	@ 0x22
 800679c:	f8ce 3000 	str.w	r3, [lr]
 80067a0:	4660      	mov	r0, ip
 80067a2:	f1b8 0f00 	cmp.w	r8, #0
 80067a6:	d0a0      	beq.n	80066ea <_strtol_l.constprop.0+0x1a>
 80067a8:	1e69      	subs	r1, r5, #1
 80067aa:	e006      	b.n	80067ba <_strtol_l.constprop.0+0xea>
 80067ac:	b106      	cbz	r6, 80067b0 <_strtol_l.constprop.0+0xe0>
 80067ae:	4240      	negs	r0, r0
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	d099      	beq.n	80066ea <_strtol_l.constprop.0+0x1a>
 80067b6:	2a00      	cmp	r2, #0
 80067b8:	d1f6      	bne.n	80067a8 <_strtol_l.constprop.0+0xd8>
 80067ba:	f8c8 1000 	str.w	r1, [r8]
 80067be:	e794      	b.n	80066ea <_strtol_l.constprop.0+0x1a>
 80067c0:	08007ca5 	.word	0x08007ca5

080067c4 <strtol>:
 80067c4:	4613      	mov	r3, r2
 80067c6:	460a      	mov	r2, r1
 80067c8:	4601      	mov	r1, r0
 80067ca:	4802      	ldr	r0, [pc, #8]	@ (80067d4 <strtol+0x10>)
 80067cc:	6800      	ldr	r0, [r0, #0]
 80067ce:	f7ff bf7f 	b.w	80066d0 <_strtol_l.constprop.0>
 80067d2:	bf00      	nop
 80067d4:	20000024 	.word	0x20000024

080067d8 <std>:
 80067d8:	2300      	movs	r3, #0
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	e9c0 3300 	strd	r3, r3, [r0]
 80067e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067e6:	6083      	str	r3, [r0, #8]
 80067e8:	8181      	strh	r1, [r0, #12]
 80067ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80067ec:	81c2      	strh	r2, [r0, #14]
 80067ee:	6183      	str	r3, [r0, #24]
 80067f0:	4619      	mov	r1, r3
 80067f2:	2208      	movs	r2, #8
 80067f4:	305c      	adds	r0, #92	@ 0x5c
 80067f6:	f000 fa2d 	bl	8006c54 <memset>
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <std+0x58>)
 80067fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <std+0x5c>)
 8006800:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <std+0x60>)
 8006804:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <std+0x64>)
 8006808:	6323      	str	r3, [r4, #48]	@ 0x30
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x68>)
 800680c:	6224      	str	r4, [r4, #32]
 800680e:	429c      	cmp	r4, r3
 8006810:	d006      	beq.n	8006820 <std+0x48>
 8006812:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006816:	4294      	cmp	r4, r2
 8006818:	d002      	beq.n	8006820 <std+0x48>
 800681a:	33d0      	adds	r3, #208	@ 0xd0
 800681c:	429c      	cmp	r4, r3
 800681e:	d105      	bne.n	800682c <std+0x54>
 8006820:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006828:	f000 ba8c 	b.w	8006d44 <__retarget_lock_init_recursive>
 800682c:	bd10      	pop	{r4, pc}
 800682e:	bf00      	nop
 8006830:	08006aa5 	.word	0x08006aa5
 8006834:	08006ac7 	.word	0x08006ac7
 8006838:	08006aff 	.word	0x08006aff
 800683c:	08006b23 	.word	0x08006b23
 8006840:	20001468 	.word	0x20001468

08006844 <stdio_exit_handler>:
 8006844:	4a02      	ldr	r2, [pc, #8]	@ (8006850 <stdio_exit_handler+0xc>)
 8006846:	4903      	ldr	r1, [pc, #12]	@ (8006854 <stdio_exit_handler+0x10>)
 8006848:	4803      	ldr	r0, [pc, #12]	@ (8006858 <stdio_exit_handler+0x14>)
 800684a:	f000 b869 	b.w	8006920 <_fwalk_sglue>
 800684e:	bf00      	nop
 8006850:	20000018 	.word	0x20000018
 8006854:	080078b1 	.word	0x080078b1
 8006858:	20000028 	.word	0x20000028

0800685c <cleanup_stdio>:
 800685c:	6841      	ldr	r1, [r0, #4]
 800685e:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <cleanup_stdio+0x34>)
 8006860:	4299      	cmp	r1, r3
 8006862:	b510      	push	{r4, lr}
 8006864:	4604      	mov	r4, r0
 8006866:	d001      	beq.n	800686c <cleanup_stdio+0x10>
 8006868:	f001 f822 	bl	80078b0 <_fflush_r>
 800686c:	68a1      	ldr	r1, [r4, #8]
 800686e:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <cleanup_stdio+0x38>)
 8006870:	4299      	cmp	r1, r3
 8006872:	d002      	beq.n	800687a <cleanup_stdio+0x1e>
 8006874:	4620      	mov	r0, r4
 8006876:	f001 f81b 	bl	80078b0 <_fflush_r>
 800687a:	68e1      	ldr	r1, [r4, #12]
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <cleanup_stdio+0x3c>)
 800687e:	4299      	cmp	r1, r3
 8006880:	d004      	beq.n	800688c <cleanup_stdio+0x30>
 8006882:	4620      	mov	r0, r4
 8006884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006888:	f001 b812 	b.w	80078b0 <_fflush_r>
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	20001468 	.word	0x20001468
 8006894:	200014d0 	.word	0x200014d0
 8006898:	20001538 	.word	0x20001538

0800689c <global_stdio_init.part.0>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <global_stdio_init.part.0+0x30>)
 80068a0:	4c0b      	ldr	r4, [pc, #44]	@ (80068d0 <global_stdio_init.part.0+0x34>)
 80068a2:	4a0c      	ldr	r2, [pc, #48]	@ (80068d4 <global_stdio_init.part.0+0x38>)
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	4620      	mov	r0, r4
 80068a8:	2200      	movs	r2, #0
 80068aa:	2104      	movs	r1, #4
 80068ac:	f7ff ff94 	bl	80067d8 <std>
 80068b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068b4:	2201      	movs	r2, #1
 80068b6:	2109      	movs	r1, #9
 80068b8:	f7ff ff8e 	bl	80067d8 <std>
 80068bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068c0:	2202      	movs	r2, #2
 80068c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c6:	2112      	movs	r1, #18
 80068c8:	f7ff bf86 	b.w	80067d8 <std>
 80068cc:	200015a0 	.word	0x200015a0
 80068d0:	20001468 	.word	0x20001468
 80068d4:	08006845 	.word	0x08006845

080068d8 <__sfp_lock_acquire>:
 80068d8:	4801      	ldr	r0, [pc, #4]	@ (80068e0 <__sfp_lock_acquire+0x8>)
 80068da:	f000 ba34 	b.w	8006d46 <__retarget_lock_acquire_recursive>
 80068de:	bf00      	nop
 80068e0:	200015a9 	.word	0x200015a9

080068e4 <__sfp_lock_release>:
 80068e4:	4801      	ldr	r0, [pc, #4]	@ (80068ec <__sfp_lock_release+0x8>)
 80068e6:	f000 ba2f 	b.w	8006d48 <__retarget_lock_release_recursive>
 80068ea:	bf00      	nop
 80068ec:	200015a9 	.word	0x200015a9

080068f0 <__sinit>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4604      	mov	r4, r0
 80068f4:	f7ff fff0 	bl	80068d8 <__sfp_lock_acquire>
 80068f8:	6a23      	ldr	r3, [r4, #32]
 80068fa:	b11b      	cbz	r3, 8006904 <__sinit+0x14>
 80068fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006900:	f7ff bff0 	b.w	80068e4 <__sfp_lock_release>
 8006904:	4b04      	ldr	r3, [pc, #16]	@ (8006918 <__sinit+0x28>)
 8006906:	6223      	str	r3, [r4, #32]
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <__sinit+0x2c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f5      	bne.n	80068fc <__sinit+0xc>
 8006910:	f7ff ffc4 	bl	800689c <global_stdio_init.part.0>
 8006914:	e7f2      	b.n	80068fc <__sinit+0xc>
 8006916:	bf00      	nop
 8006918:	0800685d 	.word	0x0800685d
 800691c:	200015a0 	.word	0x200015a0

08006920 <_fwalk_sglue>:
 8006920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006924:	4607      	mov	r7, r0
 8006926:	4688      	mov	r8, r1
 8006928:	4614      	mov	r4, r2
 800692a:	2600      	movs	r6, #0
 800692c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006930:	f1b9 0901 	subs.w	r9, r9, #1
 8006934:	d505      	bpl.n	8006942 <_fwalk_sglue+0x22>
 8006936:	6824      	ldr	r4, [r4, #0]
 8006938:	2c00      	cmp	r4, #0
 800693a:	d1f7      	bne.n	800692c <_fwalk_sglue+0xc>
 800693c:	4630      	mov	r0, r6
 800693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d907      	bls.n	8006958 <_fwalk_sglue+0x38>
 8006948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800694c:	3301      	adds	r3, #1
 800694e:	d003      	beq.n	8006958 <_fwalk_sglue+0x38>
 8006950:	4629      	mov	r1, r5
 8006952:	4638      	mov	r0, r7
 8006954:	47c0      	blx	r8
 8006956:	4306      	orrs	r6, r0
 8006958:	3568      	adds	r5, #104	@ 0x68
 800695a:	e7e9      	b.n	8006930 <_fwalk_sglue+0x10>

0800695c <iprintf>:
 800695c:	b40f      	push	{r0, r1, r2, r3}
 800695e:	b507      	push	{r0, r1, r2, lr}
 8006960:	4906      	ldr	r1, [pc, #24]	@ (800697c <iprintf+0x20>)
 8006962:	ab04      	add	r3, sp, #16
 8006964:	6808      	ldr	r0, [r1, #0]
 8006966:	f853 2b04 	ldr.w	r2, [r3], #4
 800696a:	6881      	ldr	r1, [r0, #8]
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	f000 fc75 	bl	800725c <_vfiprintf_r>
 8006972:	b003      	add	sp, #12
 8006974:	f85d eb04 	ldr.w	lr, [sp], #4
 8006978:	b004      	add	sp, #16
 800697a:	4770      	bx	lr
 800697c:	20000024 	.word	0x20000024

08006980 <_puts_r>:
 8006980:	6a03      	ldr	r3, [r0, #32]
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	6884      	ldr	r4, [r0, #8]
 8006986:	4605      	mov	r5, r0
 8006988:	460e      	mov	r6, r1
 800698a:	b90b      	cbnz	r3, 8006990 <_puts_r+0x10>
 800698c:	f7ff ffb0 	bl	80068f0 <__sinit>
 8006990:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006992:	07db      	lsls	r3, r3, #31
 8006994:	d405      	bmi.n	80069a2 <_puts_r+0x22>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	0598      	lsls	r0, r3, #22
 800699a:	d402      	bmi.n	80069a2 <_puts_r+0x22>
 800699c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800699e:	f000 f9d2 	bl	8006d46 <__retarget_lock_acquire_recursive>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	0719      	lsls	r1, r3, #28
 80069a6:	d502      	bpl.n	80069ae <_puts_r+0x2e>
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d135      	bne.n	8006a1a <_puts_r+0x9a>
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f8f9 	bl	8006ba8 <__swsetup_r>
 80069b6:	b380      	cbz	r0, 8006a1a <_puts_r+0x9a>
 80069b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80069bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069be:	07da      	lsls	r2, r3, #31
 80069c0:	d405      	bmi.n	80069ce <_puts_r+0x4e>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	059b      	lsls	r3, r3, #22
 80069c6:	d402      	bmi.n	80069ce <_puts_r+0x4e>
 80069c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ca:	f000 f9bd 	bl	8006d48 <__retarget_lock_release_recursive>
 80069ce:	4628      	mov	r0, r5
 80069d0:	bd70      	pop	{r4, r5, r6, pc}
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da04      	bge.n	80069e0 <_puts_r+0x60>
 80069d6:	69a2      	ldr	r2, [r4, #24]
 80069d8:	429a      	cmp	r2, r3
 80069da:	dc17      	bgt.n	8006a0c <_puts_r+0x8c>
 80069dc:	290a      	cmp	r1, #10
 80069de:	d015      	beq.n	8006a0c <_puts_r+0x8c>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	6022      	str	r2, [r4, #0]
 80069e6:	7019      	strb	r1, [r3, #0]
 80069e8:	68a3      	ldr	r3, [r4, #8]
 80069ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069ee:	3b01      	subs	r3, #1
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	2900      	cmp	r1, #0
 80069f4:	d1ed      	bne.n	80069d2 <_puts_r+0x52>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da11      	bge.n	8006a1e <_puts_r+0x9e>
 80069fa:	4622      	mov	r2, r4
 80069fc:	210a      	movs	r1, #10
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f893 	bl	8006b2a <__swbuf_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d0d7      	beq.n	80069b8 <_puts_r+0x38>
 8006a08:	250a      	movs	r5, #10
 8006a0a:	e7d7      	b.n	80069bc <_puts_r+0x3c>
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 f88b 	bl	8006b2a <__swbuf_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d1e7      	bne.n	80069e8 <_puts_r+0x68>
 8006a18:	e7ce      	b.n	80069b8 <_puts_r+0x38>
 8006a1a:	3e01      	subs	r6, #1
 8006a1c:	e7e4      	b.n	80069e8 <_puts_r+0x68>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	220a      	movs	r2, #10
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e7ee      	b.n	8006a08 <_puts_r+0x88>
	...

08006a2c <puts>:
 8006a2c:	4b02      	ldr	r3, [pc, #8]	@ (8006a38 <puts+0xc>)
 8006a2e:	4601      	mov	r1, r0
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	f7ff bfa5 	b.w	8006980 <_puts_r>
 8006a36:	bf00      	nop
 8006a38:	20000024 	.word	0x20000024

08006a3c <sniprintf>:
 8006a3c:	b40c      	push	{r2, r3}
 8006a3e:	b530      	push	{r4, r5, lr}
 8006a40:	4b17      	ldr	r3, [pc, #92]	@ (8006aa0 <sniprintf+0x64>)
 8006a42:	1e0c      	subs	r4, r1, #0
 8006a44:	681d      	ldr	r5, [r3, #0]
 8006a46:	b09d      	sub	sp, #116	@ 0x74
 8006a48:	da08      	bge.n	8006a5c <sniprintf+0x20>
 8006a4a:	238b      	movs	r3, #139	@ 0x8b
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a52:	b01d      	add	sp, #116	@ 0x74
 8006a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a58:	b002      	add	sp, #8
 8006a5a:	4770      	bx	lr
 8006a5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a64:	bf14      	ite	ne
 8006a66:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006a6a:	4623      	moveq	r3, r4
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	9307      	str	r3, [sp, #28]
 8006a70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a74:	9002      	str	r0, [sp, #8]
 8006a76:	9006      	str	r0, [sp, #24]
 8006a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a7e:	ab21      	add	r3, sp, #132	@ 0x84
 8006a80:	a902      	add	r1, sp, #8
 8006a82:	4628      	mov	r0, r5
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	f000 fac3 	bl	8007010 <_svfiprintf_r>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	bfbc      	itt	lt
 8006a8e:	238b      	movlt	r3, #139	@ 0x8b
 8006a90:	602b      	strlt	r3, [r5, #0]
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d0dd      	beq.n	8006a52 <sniprintf+0x16>
 8006a96:	9b02      	ldr	r3, [sp, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	e7d9      	b.n	8006a52 <sniprintf+0x16>
 8006a9e:	bf00      	nop
 8006aa0:	20000024 	.word	0x20000024

08006aa4 <__sread>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aac:	f000 f8fc 	bl	8006ca8 <_read_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	bfab      	itete	ge
 8006ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ab8:	181b      	addge	r3, r3, r0
 8006aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006abe:	bfac      	ite	ge
 8006ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ac2:	81a3      	strhlt	r3, [r4, #12]
 8006ac4:	bd10      	pop	{r4, pc}

08006ac6 <__swrite>:
 8006ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aca:	461f      	mov	r7, r3
 8006acc:	898b      	ldrh	r3, [r1, #12]
 8006ace:	05db      	lsls	r3, r3, #23
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	d505      	bpl.n	8006ae4 <__swrite+0x1e>
 8006ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006adc:	2302      	movs	r3, #2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f000 f8d0 	bl	8006c84 <_lseek_r>
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	4632      	mov	r2, r6
 8006af2:	463b      	mov	r3, r7
 8006af4:	4628      	mov	r0, r5
 8006af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006afa:	f000 b8e7 	b.w	8006ccc <_write_r>

08006afe <__sseek>:
 8006afe:	b510      	push	{r4, lr}
 8006b00:	460c      	mov	r4, r1
 8006b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b06:	f000 f8bd 	bl	8006c84 <_lseek_r>
 8006b0a:	1c43      	adds	r3, r0, #1
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	bf15      	itete	ne
 8006b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b1a:	81a3      	strheq	r3, [r4, #12]
 8006b1c:	bf18      	it	ne
 8006b1e:	81a3      	strhne	r3, [r4, #12]
 8006b20:	bd10      	pop	{r4, pc}

08006b22 <__sclose>:
 8006b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b26:	f000 b89d 	b.w	8006c64 <_close_r>

08006b2a <__swbuf_r>:
 8006b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	4614      	mov	r4, r2
 8006b30:	4605      	mov	r5, r0
 8006b32:	b118      	cbz	r0, 8006b3c <__swbuf_r+0x12>
 8006b34:	6a03      	ldr	r3, [r0, #32]
 8006b36:	b90b      	cbnz	r3, 8006b3c <__swbuf_r+0x12>
 8006b38:	f7ff feda 	bl	80068f0 <__sinit>
 8006b3c:	69a3      	ldr	r3, [r4, #24]
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	071a      	lsls	r2, r3, #28
 8006b44:	d501      	bpl.n	8006b4a <__swbuf_r+0x20>
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	b943      	cbnz	r3, 8006b5c <__swbuf_r+0x32>
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 f82b 	bl	8006ba8 <__swsetup_r>
 8006b52:	b118      	cbz	r0, 8006b5c <__swbuf_r+0x32>
 8006b54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006b58:	4638      	mov	r0, r7
 8006b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	1a98      	subs	r0, r3, r2
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	b2f6      	uxtb	r6, r6
 8006b66:	4283      	cmp	r3, r0
 8006b68:	4637      	mov	r7, r6
 8006b6a:	dc05      	bgt.n	8006b78 <__swbuf_r+0x4e>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fe9e 	bl	80078b0 <_fflush_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1ed      	bne.n	8006b54 <__swbuf_r+0x2a>
 8006b78:	68a3      	ldr	r3, [r4, #8]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60a3      	str	r3, [r4, #8]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	701e      	strb	r6, [r3, #0]
 8006b86:	6962      	ldr	r2, [r4, #20]
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d004      	beq.n	8006b98 <__swbuf_r+0x6e>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	07db      	lsls	r3, r3, #31
 8006b92:	d5e1      	bpl.n	8006b58 <__swbuf_r+0x2e>
 8006b94:	2e0a      	cmp	r6, #10
 8006b96:	d1df      	bne.n	8006b58 <__swbuf_r+0x2e>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 fe88 	bl	80078b0 <_fflush_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0d9      	beq.n	8006b58 <__swbuf_r+0x2e>
 8006ba4:	e7d6      	b.n	8006b54 <__swbuf_r+0x2a>
	...

08006ba8 <__swsetup_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4b29      	ldr	r3, [pc, #164]	@ (8006c50 <__swsetup_r+0xa8>)
 8006bac:	4605      	mov	r5, r0
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	b118      	cbz	r0, 8006bbc <__swsetup_r+0x14>
 8006bb4:	6a03      	ldr	r3, [r0, #32]
 8006bb6:	b90b      	cbnz	r3, 8006bbc <__swsetup_r+0x14>
 8006bb8:	f7ff fe9a 	bl	80068f0 <__sinit>
 8006bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc0:	0719      	lsls	r1, r3, #28
 8006bc2:	d422      	bmi.n	8006c0a <__swsetup_r+0x62>
 8006bc4:	06da      	lsls	r2, r3, #27
 8006bc6:	d407      	bmi.n	8006bd8 <__swsetup_r+0x30>
 8006bc8:	2209      	movs	r2, #9
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd6:	e033      	b.n	8006c40 <__swsetup_r+0x98>
 8006bd8:	0758      	lsls	r0, r3, #29
 8006bda:	d512      	bpl.n	8006c02 <__swsetup_r+0x5a>
 8006bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bde:	b141      	cbz	r1, 8006bf2 <__swsetup_r+0x4a>
 8006be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d002      	beq.n	8006bee <__swsetup_r+0x46>
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 f8bd 	bl	8006d68 <_free_r>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f043 0308 	orr.w	r3, r3, #8
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	b94b      	cbnz	r3, 8006c22 <__swsetup_r+0x7a>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c18:	d003      	beq.n	8006c22 <__swsetup_r+0x7a>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 fe95 	bl	800794c <__smakebuf_r>
 8006c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c26:	f013 0201 	ands.w	r2, r3, #1
 8006c2a:	d00a      	beq.n	8006c42 <__swsetup_r+0x9a>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	60a2      	str	r2, [r4, #8]
 8006c30:	6962      	ldr	r2, [r4, #20]
 8006c32:	4252      	negs	r2, r2
 8006c34:	61a2      	str	r2, [r4, #24]
 8006c36:	6922      	ldr	r2, [r4, #16]
 8006c38:	b942      	cbnz	r2, 8006c4c <__swsetup_r+0xa4>
 8006c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c3e:	d1c5      	bne.n	8006bcc <__swsetup_r+0x24>
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	0799      	lsls	r1, r3, #30
 8006c44:	bf58      	it	pl
 8006c46:	6962      	ldrpl	r2, [r4, #20]
 8006c48:	60a2      	str	r2, [r4, #8]
 8006c4a:	e7f4      	b.n	8006c36 <__swsetup_r+0x8e>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7f7      	b.n	8006c40 <__swsetup_r+0x98>
 8006c50:	20000024 	.word	0x20000024

08006c54 <memset>:
 8006c54:	4402      	add	r2, r0
 8006c56:	4603      	mov	r3, r0
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d100      	bne.n	8006c5e <memset+0xa>
 8006c5c:	4770      	bx	lr
 8006c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c62:	e7f9      	b.n	8006c58 <memset+0x4>

08006c64 <_close_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d06      	ldr	r5, [pc, #24]	@ (8006c80 <_close_r+0x1c>)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	f7f9 fedb 	bl	8000a2a <_close>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_close_r+0x1a>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_close_r+0x1a>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	200015a4 	.word	0x200015a4

08006c84 <_lseek_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4d07      	ldr	r5, [pc, #28]	@ (8006ca4 <_lseek_r+0x20>)
 8006c88:	4604      	mov	r4, r0
 8006c8a:	4608      	mov	r0, r1
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	602a      	str	r2, [r5, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f7f9 fef0 	bl	8000a78 <_lseek>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_lseek_r+0x1e>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_lseek_r+0x1e>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	200015a4 	.word	0x200015a4

08006ca8 <_read_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d07      	ldr	r5, [pc, #28]	@ (8006cc8 <_read_r+0x20>)
 8006cac:	4604      	mov	r4, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f7f9 fe7e 	bl	80009b8 <_read>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_read_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_read_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200015a4 	.word	0x200015a4

08006ccc <_write_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	@ (8006cec <_write_r+0x20>)
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7f9 fe89 	bl	80009f2 <_write>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_write_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_write_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200015a4 	.word	0x200015a4

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	@ (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000024 	.word	0x20000024

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8006d34 <__libc_init_array+0x38>)
 8006d00:	4c0d      	ldr	r4, [pc, #52]	@ (8006d38 <__libc_init_array+0x3c>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	2600      	movs	r6, #0
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d3c <__libc_init_array+0x40>)
 8006d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006d40 <__libc_init_array+0x44>)
 8006d10:	f000 feda 	bl	8007ac8 <_init>
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	2600      	movs	r6, #0
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	08007de0 	.word	0x08007de0
 8006d38:	08007de0 	.word	0x08007de0
 8006d3c:	08007de0 	.word	0x08007de0
 8006d40:	08007de4 	.word	0x08007de4

08006d44 <__retarget_lock_init_recursive>:
 8006d44:	4770      	bx	lr

08006d46 <__retarget_lock_acquire_recursive>:
 8006d46:	4770      	bx	lr

08006d48 <__retarget_lock_release_recursive>:
 8006d48:	4770      	bx	lr

08006d4a <memcpy>:
 8006d4a:	440a      	add	r2, r1
 8006d4c:	4291      	cmp	r1, r2
 8006d4e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d52:	d100      	bne.n	8006d56 <memcpy+0xc>
 8006d54:	4770      	bx	lr
 8006d56:	b510      	push	{r4, lr}
 8006d58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d60:	4291      	cmp	r1, r2
 8006d62:	d1f9      	bne.n	8006d58 <memcpy+0xe>
 8006d64:	bd10      	pop	{r4, pc}
	...

08006d68 <_free_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d041      	beq.n	8006df4 <_free_r+0x8c>
 8006d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d74:	1f0c      	subs	r4, r1, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	18e4      	addlt	r4, r4, r3
 8006d7c:	f000 f8e0 	bl	8006f40 <__malloc_lock>
 8006d80:	4a1d      	ldr	r2, [pc, #116]	@ (8006df8 <_free_r+0x90>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	b933      	cbnz	r3, 8006d94 <_free_r+0x2c>
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	6014      	str	r4, [r2, #0]
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d90:	f000 b8dc 	b.w	8006f4c <__malloc_unlock>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d908      	bls.n	8006daa <_free_r+0x42>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	1821      	adds	r1, r4, r0
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf01      	itttt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	1809      	addeq	r1, r1, r0
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	e7ed      	b.n	8006d86 <_free_r+0x1e>
 8006daa:	461a      	mov	r2, r3
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b10b      	cbz	r3, 8006db4 <_free_r+0x4c>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d9fa      	bls.n	8006daa <_free_r+0x42>
 8006db4:	6811      	ldr	r1, [r2, #0]
 8006db6:	1850      	adds	r0, r2, r1
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d10b      	bne.n	8006dd4 <_free_r+0x6c>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	4401      	add	r1, r0
 8006dc0:	1850      	adds	r0, r2, r1
 8006dc2:	4283      	cmp	r3, r0
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	d1e0      	bne.n	8006d8a <_free_r+0x22>
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	4408      	add	r0, r1
 8006dd0:	6010      	str	r0, [r2, #0]
 8006dd2:	e7da      	b.n	8006d8a <_free_r+0x22>
 8006dd4:	d902      	bls.n	8006ddc <_free_r+0x74>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	e7d6      	b.n	8006d8a <_free_r+0x22>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	1821      	adds	r1, r4, r0
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf04      	itt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	6063      	str	r3, [r4, #4]
 8006dea:	bf04      	itt	eq
 8006dec:	1809      	addeq	r1, r1, r0
 8006dee:	6021      	streq	r1, [r4, #0]
 8006df0:	6054      	str	r4, [r2, #4]
 8006df2:	e7ca      	b.n	8006d8a <_free_r+0x22>
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	200015b0 	.word	0x200015b0

08006dfc <sbrk_aligned>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8006e3c <sbrk_aligned+0x40>)
 8006e00:	460c      	mov	r4, r1
 8006e02:	6831      	ldr	r1, [r6, #0]
 8006e04:	4605      	mov	r5, r0
 8006e06:	b911      	cbnz	r1, 8006e0e <sbrk_aligned+0x12>
 8006e08:	f000 fe18 	bl	8007a3c <_sbrk_r>
 8006e0c:	6030      	str	r0, [r6, #0]
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 fe13 	bl	8007a3c <_sbrk_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d103      	bne.n	8006e22 <sbrk_aligned+0x26>
 8006e1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006e1e:	4620      	mov	r0, r4
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	1cc4      	adds	r4, r0, #3
 8006e24:	f024 0403 	bic.w	r4, r4, #3
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d0f8      	beq.n	8006e1e <sbrk_aligned+0x22>
 8006e2c:	1a21      	subs	r1, r4, r0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 fe04 	bl	8007a3c <_sbrk_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d1f2      	bne.n	8006e1e <sbrk_aligned+0x22>
 8006e38:	e7ef      	b.n	8006e1a <sbrk_aligned+0x1e>
 8006e3a:	bf00      	nop
 8006e3c:	200015ac 	.word	0x200015ac

08006e40 <_malloc_r>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	1ccd      	adds	r5, r1, #3
 8006e46:	f025 0503 	bic.w	r5, r5, #3
 8006e4a:	3508      	adds	r5, #8
 8006e4c:	2d0c      	cmp	r5, #12
 8006e4e:	bf38      	it	cc
 8006e50:	250c      	movcc	r5, #12
 8006e52:	2d00      	cmp	r5, #0
 8006e54:	4606      	mov	r6, r0
 8006e56:	db01      	blt.n	8006e5c <_malloc_r+0x1c>
 8006e58:	42a9      	cmp	r1, r5
 8006e5a:	d904      	bls.n	8006e66 <_malloc_r+0x26>
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	2000      	movs	r0, #0
 8006e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f3c <_malloc_r+0xfc>
 8006e6a:	f000 f869 	bl	8006f40 <__malloc_lock>
 8006e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e72:	461c      	mov	r4, r3
 8006e74:	bb44      	cbnz	r4, 8006ec8 <_malloc_r+0x88>
 8006e76:	4629      	mov	r1, r5
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f7ff ffbf 	bl	8006dfc <sbrk_aligned>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	4604      	mov	r4, r0
 8006e82:	d158      	bne.n	8006f36 <_malloc_r+0xf6>
 8006e84:	f8d8 4000 	ldr.w	r4, [r8]
 8006e88:	4627      	mov	r7, r4
 8006e8a:	2f00      	cmp	r7, #0
 8006e8c:	d143      	bne.n	8006f16 <_malloc_r+0xd6>
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	d04b      	beq.n	8006f2a <_malloc_r+0xea>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4639      	mov	r1, r7
 8006e96:	4630      	mov	r0, r6
 8006e98:	eb04 0903 	add.w	r9, r4, r3
 8006e9c:	f000 fdce 	bl	8007a3c <_sbrk_r>
 8006ea0:	4581      	cmp	r9, r0
 8006ea2:	d142      	bne.n	8006f2a <_malloc_r+0xea>
 8006ea4:	6821      	ldr	r1, [r4, #0]
 8006ea6:	1a6d      	subs	r5, r5, r1
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7ff ffa6 	bl	8006dfc <sbrk_aligned>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d03a      	beq.n	8006f2a <_malloc_r+0xea>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	442b      	add	r3, r5
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	f8d8 3000 	ldr.w	r3, [r8]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	bb62      	cbnz	r2, 8006f1c <_malloc_r+0xdc>
 8006ec2:	f8c8 7000 	str.w	r7, [r8]
 8006ec6:	e00f      	b.n	8006ee8 <_malloc_r+0xa8>
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	1b52      	subs	r2, r2, r5
 8006ecc:	d420      	bmi.n	8006f10 <_malloc_r+0xd0>
 8006ece:	2a0b      	cmp	r2, #11
 8006ed0:	d917      	bls.n	8006f02 <_malloc_r+0xc2>
 8006ed2:	1961      	adds	r1, r4, r5
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	6025      	str	r5, [r4, #0]
 8006ed8:	bf18      	it	ne
 8006eda:	6059      	strne	r1, [r3, #4]
 8006edc:	6863      	ldr	r3, [r4, #4]
 8006ede:	bf08      	it	eq
 8006ee0:	f8c8 1000 	streq.w	r1, [r8]
 8006ee4:	5162      	str	r2, [r4, r5]
 8006ee6:	604b      	str	r3, [r1, #4]
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f82f 	bl	8006f4c <__malloc_unlock>
 8006eee:	f104 000b 	add.w	r0, r4, #11
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	f020 0007 	bic.w	r0, r0, #7
 8006ef8:	1ac2      	subs	r2, r0, r3
 8006efa:	bf1c      	itt	ne
 8006efc:	1a1b      	subne	r3, r3, r0
 8006efe:	50a3      	strne	r3, [r4, r2]
 8006f00:	e7af      	b.n	8006e62 <_malloc_r+0x22>
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	bf0c      	ite	eq
 8006f08:	f8c8 2000 	streq.w	r2, [r8]
 8006f0c:	605a      	strne	r2, [r3, #4]
 8006f0e:	e7eb      	b.n	8006ee8 <_malloc_r+0xa8>
 8006f10:	4623      	mov	r3, r4
 8006f12:	6864      	ldr	r4, [r4, #4]
 8006f14:	e7ae      	b.n	8006e74 <_malloc_r+0x34>
 8006f16:	463c      	mov	r4, r7
 8006f18:	687f      	ldr	r7, [r7, #4]
 8006f1a:	e7b6      	b.n	8006e8a <_malloc_r+0x4a>
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d1fb      	bne.n	8006f1c <_malloc_r+0xdc>
 8006f24:	2300      	movs	r3, #0
 8006f26:	6053      	str	r3, [r2, #4]
 8006f28:	e7de      	b.n	8006ee8 <_malloc_r+0xa8>
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f80c 	bl	8006f4c <__malloc_unlock>
 8006f34:	e794      	b.n	8006e60 <_malloc_r+0x20>
 8006f36:	6005      	str	r5, [r0, #0]
 8006f38:	e7d6      	b.n	8006ee8 <_malloc_r+0xa8>
 8006f3a:	bf00      	nop
 8006f3c:	200015b0 	.word	0x200015b0

08006f40 <__malloc_lock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	@ (8006f48 <__malloc_lock+0x8>)
 8006f42:	f7ff bf00 	b.w	8006d46 <__retarget_lock_acquire_recursive>
 8006f46:	bf00      	nop
 8006f48:	200015a8 	.word	0x200015a8

08006f4c <__malloc_unlock>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__malloc_unlock+0x8>)
 8006f4e:	f7ff befb 	b.w	8006d48 <__retarget_lock_release_recursive>
 8006f52:	bf00      	nop
 8006f54:	200015a8 	.word	0x200015a8

08006f58 <__ssputs_r>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	688e      	ldr	r6, [r1, #8]
 8006f5e:	461f      	mov	r7, r3
 8006f60:	42be      	cmp	r6, r7
 8006f62:	680b      	ldr	r3, [r1, #0]
 8006f64:	4682      	mov	sl, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	4690      	mov	r8, r2
 8006f6a:	d82d      	bhi.n	8006fc8 <__ssputs_r+0x70>
 8006f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f74:	d026      	beq.n	8006fc4 <__ssputs_r+0x6c>
 8006f76:	6965      	ldr	r5, [r4, #20]
 8006f78:	6909      	ldr	r1, [r1, #16]
 8006f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f7e:	eba3 0901 	sub.w	r9, r3, r1
 8006f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f86:	1c7b      	adds	r3, r7, #1
 8006f88:	444b      	add	r3, r9
 8006f8a:	106d      	asrs	r5, r5, #1
 8006f8c:	429d      	cmp	r5, r3
 8006f8e:	bf38      	it	cc
 8006f90:	461d      	movcc	r5, r3
 8006f92:	0553      	lsls	r3, r2, #21
 8006f94:	d527      	bpl.n	8006fe6 <__ssputs_r+0x8e>
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7ff ff52 	bl	8006e40 <_malloc_r>
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	b360      	cbz	r0, 8006ffa <__ssputs_r+0xa2>
 8006fa0:	6921      	ldr	r1, [r4, #16]
 8006fa2:	464a      	mov	r2, r9
 8006fa4:	f7ff fed1 	bl	8006d4a <memcpy>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	6126      	str	r6, [r4, #16]
 8006fb6:	6165      	str	r5, [r4, #20]
 8006fb8:	444e      	add	r6, r9
 8006fba:	eba5 0509 	sub.w	r5, r5, r9
 8006fbe:	6026      	str	r6, [r4, #0]
 8006fc0:	60a5      	str	r5, [r4, #8]
 8006fc2:	463e      	mov	r6, r7
 8006fc4:	42be      	cmp	r6, r7
 8006fc6:	d900      	bls.n	8006fca <__ssputs_r+0x72>
 8006fc8:	463e      	mov	r6, r7
 8006fca:	6820      	ldr	r0, [r4, #0]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4641      	mov	r1, r8
 8006fd0:	f000 fcf8 	bl	80079c4 <memmove>
 8006fd4:	68a3      	ldr	r3, [r4, #8]
 8006fd6:	1b9b      	subs	r3, r3, r6
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	4433      	add	r3, r6
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	f000 fd38 	bl	8007a5c <_realloc_r>
 8006fec:	4606      	mov	r6, r0
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d1e0      	bne.n	8006fb4 <__ssputs_r+0x5c>
 8006ff2:	6921      	ldr	r1, [r4, #16]
 8006ff4:	4650      	mov	r0, sl
 8006ff6:	f7ff feb7 	bl	8006d68 <_free_r>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	f8ca 3000 	str.w	r3, [sl]
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800700c:	e7e9      	b.n	8006fe2 <__ssputs_r+0x8a>
	...

08007010 <_svfiprintf_r>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	4698      	mov	r8, r3
 8007016:	898b      	ldrh	r3, [r1, #12]
 8007018:	061b      	lsls	r3, r3, #24
 800701a:	b09d      	sub	sp, #116	@ 0x74
 800701c:	4607      	mov	r7, r0
 800701e:	460d      	mov	r5, r1
 8007020:	4614      	mov	r4, r2
 8007022:	d510      	bpl.n	8007046 <_svfiprintf_r+0x36>
 8007024:	690b      	ldr	r3, [r1, #16]
 8007026:	b973      	cbnz	r3, 8007046 <_svfiprintf_r+0x36>
 8007028:	2140      	movs	r1, #64	@ 0x40
 800702a:	f7ff ff09 	bl	8006e40 <_malloc_r>
 800702e:	6028      	str	r0, [r5, #0]
 8007030:	6128      	str	r0, [r5, #16]
 8007032:	b930      	cbnz	r0, 8007042 <_svfiprintf_r+0x32>
 8007034:	230c      	movs	r3, #12
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800703c:	b01d      	add	sp, #116	@ 0x74
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	2340      	movs	r3, #64	@ 0x40
 8007044:	616b      	str	r3, [r5, #20]
 8007046:	2300      	movs	r3, #0
 8007048:	9309      	str	r3, [sp, #36]	@ 0x24
 800704a:	2320      	movs	r3, #32
 800704c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007050:	f8cd 800c 	str.w	r8, [sp, #12]
 8007054:	2330      	movs	r3, #48	@ 0x30
 8007056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071f4 <_svfiprintf_r+0x1e4>
 800705a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800705e:	f04f 0901 	mov.w	r9, #1
 8007062:	4623      	mov	r3, r4
 8007064:	469a      	mov	sl, r3
 8007066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800706a:	b10a      	cbz	r2, 8007070 <_svfiprintf_r+0x60>
 800706c:	2a25      	cmp	r2, #37	@ 0x25
 800706e:	d1f9      	bne.n	8007064 <_svfiprintf_r+0x54>
 8007070:	ebba 0b04 	subs.w	fp, sl, r4
 8007074:	d00b      	beq.n	800708e <_svfiprintf_r+0x7e>
 8007076:	465b      	mov	r3, fp
 8007078:	4622      	mov	r2, r4
 800707a:	4629      	mov	r1, r5
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff ff6b 	bl	8006f58 <__ssputs_r>
 8007082:	3001      	adds	r0, #1
 8007084:	f000 80a7 	beq.w	80071d6 <_svfiprintf_r+0x1c6>
 8007088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800708a:	445a      	add	r2, fp
 800708c:	9209      	str	r2, [sp, #36]	@ 0x24
 800708e:	f89a 3000 	ldrb.w	r3, [sl]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 809f 	beq.w	80071d6 <_svfiprintf_r+0x1c6>
 8007098:	2300      	movs	r3, #0
 800709a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800709e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a2:	f10a 0a01 	add.w	sl, sl, #1
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80070b0:	4654      	mov	r4, sl
 80070b2:	2205      	movs	r2, #5
 80070b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b8:	484e      	ldr	r0, [pc, #312]	@ (80071f4 <_svfiprintf_r+0x1e4>)
 80070ba:	f7f9 f889 	bl	80001d0 <memchr>
 80070be:	9a04      	ldr	r2, [sp, #16]
 80070c0:	b9d8      	cbnz	r0, 80070fa <_svfiprintf_r+0xea>
 80070c2:	06d0      	lsls	r0, r2, #27
 80070c4:	bf44      	itt	mi
 80070c6:	2320      	movmi	r3, #32
 80070c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070cc:	0711      	lsls	r1, r2, #28
 80070ce:	bf44      	itt	mi
 80070d0:	232b      	movmi	r3, #43	@ 0x2b
 80070d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070d6:	f89a 3000 	ldrb.w	r3, [sl]
 80070da:	2b2a      	cmp	r3, #42	@ 0x2a
 80070dc:	d015      	beq.n	800710a <_svfiprintf_r+0xfa>
 80070de:	9a07      	ldr	r2, [sp, #28]
 80070e0:	4654      	mov	r4, sl
 80070e2:	2000      	movs	r0, #0
 80070e4:	f04f 0c0a 	mov.w	ip, #10
 80070e8:	4621      	mov	r1, r4
 80070ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ee:	3b30      	subs	r3, #48	@ 0x30
 80070f0:	2b09      	cmp	r3, #9
 80070f2:	d94b      	bls.n	800718c <_svfiprintf_r+0x17c>
 80070f4:	b1b0      	cbz	r0, 8007124 <_svfiprintf_r+0x114>
 80070f6:	9207      	str	r2, [sp, #28]
 80070f8:	e014      	b.n	8007124 <_svfiprintf_r+0x114>
 80070fa:	eba0 0308 	sub.w	r3, r0, r8
 80070fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	46a2      	mov	sl, r4
 8007108:	e7d2      	b.n	80070b0 <_svfiprintf_r+0xa0>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	1d19      	adds	r1, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	9103      	str	r1, [sp, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfbb      	ittet	lt
 8007116:	425b      	neglt	r3, r3
 8007118:	f042 0202 	orrlt.w	r2, r2, #2
 800711c:	9307      	strge	r3, [sp, #28]
 800711e:	9307      	strlt	r3, [sp, #28]
 8007120:	bfb8      	it	lt
 8007122:	9204      	strlt	r2, [sp, #16]
 8007124:	7823      	ldrb	r3, [r4, #0]
 8007126:	2b2e      	cmp	r3, #46	@ 0x2e
 8007128:	d10a      	bne.n	8007140 <_svfiprintf_r+0x130>
 800712a:	7863      	ldrb	r3, [r4, #1]
 800712c:	2b2a      	cmp	r3, #42	@ 0x2a
 800712e:	d132      	bne.n	8007196 <_svfiprintf_r+0x186>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	1d1a      	adds	r2, r3, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	9203      	str	r2, [sp, #12]
 8007138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800713c:	3402      	adds	r4, #2
 800713e:	9305      	str	r3, [sp, #20]
 8007140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007204 <_svfiprintf_r+0x1f4>
 8007144:	7821      	ldrb	r1, [r4, #0]
 8007146:	2203      	movs	r2, #3
 8007148:	4650      	mov	r0, sl
 800714a:	f7f9 f841 	bl	80001d0 <memchr>
 800714e:	b138      	cbz	r0, 8007160 <_svfiprintf_r+0x150>
 8007150:	9b04      	ldr	r3, [sp, #16]
 8007152:	eba0 000a 	sub.w	r0, r0, sl
 8007156:	2240      	movs	r2, #64	@ 0x40
 8007158:	4082      	lsls	r2, r0
 800715a:	4313      	orrs	r3, r2
 800715c:	3401      	adds	r4, #1
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007164:	4824      	ldr	r0, [pc, #144]	@ (80071f8 <_svfiprintf_r+0x1e8>)
 8007166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800716a:	2206      	movs	r2, #6
 800716c:	f7f9 f830 	bl	80001d0 <memchr>
 8007170:	2800      	cmp	r0, #0
 8007172:	d036      	beq.n	80071e2 <_svfiprintf_r+0x1d2>
 8007174:	4b21      	ldr	r3, [pc, #132]	@ (80071fc <_svfiprintf_r+0x1ec>)
 8007176:	bb1b      	cbnz	r3, 80071c0 <_svfiprintf_r+0x1b0>
 8007178:	9b03      	ldr	r3, [sp, #12]
 800717a:	3307      	adds	r3, #7
 800717c:	f023 0307 	bic.w	r3, r3, #7
 8007180:	3308      	adds	r3, #8
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007186:	4433      	add	r3, r6
 8007188:	9309      	str	r3, [sp, #36]	@ 0x24
 800718a:	e76a      	b.n	8007062 <_svfiprintf_r+0x52>
 800718c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007190:	460c      	mov	r4, r1
 8007192:	2001      	movs	r0, #1
 8007194:	e7a8      	b.n	80070e8 <_svfiprintf_r+0xd8>
 8007196:	2300      	movs	r3, #0
 8007198:	3401      	adds	r4, #1
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	4619      	mov	r1, r3
 800719e:	f04f 0c0a 	mov.w	ip, #10
 80071a2:	4620      	mov	r0, r4
 80071a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071a8:	3a30      	subs	r2, #48	@ 0x30
 80071aa:	2a09      	cmp	r2, #9
 80071ac:	d903      	bls.n	80071b6 <_svfiprintf_r+0x1a6>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0c6      	beq.n	8007140 <_svfiprintf_r+0x130>
 80071b2:	9105      	str	r1, [sp, #20]
 80071b4:	e7c4      	b.n	8007140 <_svfiprintf_r+0x130>
 80071b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ba:	4604      	mov	r4, r0
 80071bc:	2301      	movs	r3, #1
 80071be:	e7f0      	b.n	80071a2 <_svfiprintf_r+0x192>
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	462a      	mov	r2, r5
 80071c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007200 <_svfiprintf_r+0x1f0>)
 80071c8:	a904      	add	r1, sp, #16
 80071ca:	4638      	mov	r0, r7
 80071cc:	f3af 8000 	nop.w
 80071d0:	1c42      	adds	r2, r0, #1
 80071d2:	4606      	mov	r6, r0
 80071d4:	d1d6      	bne.n	8007184 <_svfiprintf_r+0x174>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	065b      	lsls	r3, r3, #25
 80071da:	f53f af2d 	bmi.w	8007038 <_svfiprintf_r+0x28>
 80071de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071e0:	e72c      	b.n	800703c <_svfiprintf_r+0x2c>
 80071e2:	ab03      	add	r3, sp, #12
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	462a      	mov	r2, r5
 80071e8:	4b05      	ldr	r3, [pc, #20]	@ (8007200 <_svfiprintf_r+0x1f0>)
 80071ea:	a904      	add	r1, sp, #16
 80071ec:	4638      	mov	r0, r7
 80071ee:	f000 f9bb 	bl	8007568 <_printf_i>
 80071f2:	e7ed      	b.n	80071d0 <_svfiprintf_r+0x1c0>
 80071f4:	08007da5 	.word	0x08007da5
 80071f8:	08007daf 	.word	0x08007daf
 80071fc:	00000000 	.word	0x00000000
 8007200:	08006f59 	.word	0x08006f59
 8007204:	08007dab 	.word	0x08007dab

08007208 <__sfputc_r>:
 8007208:	6893      	ldr	r3, [r2, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	b410      	push	{r4}
 8007210:	6093      	str	r3, [r2, #8]
 8007212:	da08      	bge.n	8007226 <__sfputc_r+0x1e>
 8007214:	6994      	ldr	r4, [r2, #24]
 8007216:	42a3      	cmp	r3, r4
 8007218:	db01      	blt.n	800721e <__sfputc_r+0x16>
 800721a:	290a      	cmp	r1, #10
 800721c:	d103      	bne.n	8007226 <__sfputc_r+0x1e>
 800721e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007222:	f7ff bc82 	b.w	8006b2a <__swbuf_r>
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	1c58      	adds	r0, r3, #1
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	7019      	strb	r1, [r3, #0]
 800722e:	4608      	mov	r0, r1
 8007230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007234:	4770      	bx	lr

08007236 <__sfputs_r>:
 8007236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007238:	4606      	mov	r6, r0
 800723a:	460f      	mov	r7, r1
 800723c:	4614      	mov	r4, r2
 800723e:	18d5      	adds	r5, r2, r3
 8007240:	42ac      	cmp	r4, r5
 8007242:	d101      	bne.n	8007248 <__sfputs_r+0x12>
 8007244:	2000      	movs	r0, #0
 8007246:	e007      	b.n	8007258 <__sfputs_r+0x22>
 8007248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724c:	463a      	mov	r2, r7
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffda 	bl	8007208 <__sfputc_r>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d1f3      	bne.n	8007240 <__sfputs_r+0xa>
 8007258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800725c <_vfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	460d      	mov	r5, r1
 8007262:	b09d      	sub	sp, #116	@ 0x74
 8007264:	4614      	mov	r4, r2
 8007266:	4698      	mov	r8, r3
 8007268:	4606      	mov	r6, r0
 800726a:	b118      	cbz	r0, 8007274 <_vfiprintf_r+0x18>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <_vfiprintf_r+0x18>
 8007270:	f7ff fb3e 	bl	80068f0 <__sinit>
 8007274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	d405      	bmi.n	8007286 <_vfiprintf_r+0x2a>
 800727a:	89ab      	ldrh	r3, [r5, #12]
 800727c:	059a      	lsls	r2, r3, #22
 800727e:	d402      	bmi.n	8007286 <_vfiprintf_r+0x2a>
 8007280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007282:	f7ff fd60 	bl	8006d46 <__retarget_lock_acquire_recursive>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	071b      	lsls	r3, r3, #28
 800728a:	d501      	bpl.n	8007290 <_vfiprintf_r+0x34>
 800728c:	692b      	ldr	r3, [r5, #16]
 800728e:	b99b      	cbnz	r3, 80072b8 <_vfiprintf_r+0x5c>
 8007290:	4629      	mov	r1, r5
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff fc88 	bl	8006ba8 <__swsetup_r>
 8007298:	b170      	cbz	r0, 80072b8 <_vfiprintf_r+0x5c>
 800729a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800729c:	07dc      	lsls	r4, r3, #31
 800729e:	d504      	bpl.n	80072aa <_vfiprintf_r+0x4e>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072a4:	b01d      	add	sp, #116	@ 0x74
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	89ab      	ldrh	r3, [r5, #12]
 80072ac:	0598      	lsls	r0, r3, #22
 80072ae:	d4f7      	bmi.n	80072a0 <_vfiprintf_r+0x44>
 80072b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072b2:	f7ff fd49 	bl	8006d48 <__retarget_lock_release_recursive>
 80072b6:	e7f3      	b.n	80072a0 <_vfiprintf_r+0x44>
 80072b8:	2300      	movs	r3, #0
 80072ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80072bc:	2320      	movs	r3, #32
 80072be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c6:	2330      	movs	r3, #48	@ 0x30
 80072c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007478 <_vfiprintf_r+0x21c>
 80072cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072d0:	f04f 0901 	mov.w	r9, #1
 80072d4:	4623      	mov	r3, r4
 80072d6:	469a      	mov	sl, r3
 80072d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072dc:	b10a      	cbz	r2, 80072e2 <_vfiprintf_r+0x86>
 80072de:	2a25      	cmp	r2, #37	@ 0x25
 80072e0:	d1f9      	bne.n	80072d6 <_vfiprintf_r+0x7a>
 80072e2:	ebba 0b04 	subs.w	fp, sl, r4
 80072e6:	d00b      	beq.n	8007300 <_vfiprintf_r+0xa4>
 80072e8:	465b      	mov	r3, fp
 80072ea:	4622      	mov	r2, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ffa1 	bl	8007236 <__sfputs_r>
 80072f4:	3001      	adds	r0, #1
 80072f6:	f000 80a7 	beq.w	8007448 <_vfiprintf_r+0x1ec>
 80072fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fc:	445a      	add	r2, fp
 80072fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007300:	f89a 3000 	ldrb.w	r3, [sl]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 809f 	beq.w	8007448 <_vfiprintf_r+0x1ec>
 800730a:	2300      	movs	r3, #0
 800730c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007314:	f10a 0a01 	add.w	sl, sl, #1
 8007318:	9304      	str	r3, [sp, #16]
 800731a:	9307      	str	r3, [sp, #28]
 800731c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007320:	931a      	str	r3, [sp, #104]	@ 0x68
 8007322:	4654      	mov	r4, sl
 8007324:	2205      	movs	r2, #5
 8007326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732a:	4853      	ldr	r0, [pc, #332]	@ (8007478 <_vfiprintf_r+0x21c>)
 800732c:	f7f8 ff50 	bl	80001d0 <memchr>
 8007330:	9a04      	ldr	r2, [sp, #16]
 8007332:	b9d8      	cbnz	r0, 800736c <_vfiprintf_r+0x110>
 8007334:	06d1      	lsls	r1, r2, #27
 8007336:	bf44      	itt	mi
 8007338:	2320      	movmi	r3, #32
 800733a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733e:	0713      	lsls	r3, r2, #28
 8007340:	bf44      	itt	mi
 8007342:	232b      	movmi	r3, #43	@ 0x2b
 8007344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007348:	f89a 3000 	ldrb.w	r3, [sl]
 800734c:	2b2a      	cmp	r3, #42	@ 0x2a
 800734e:	d015      	beq.n	800737c <_vfiprintf_r+0x120>
 8007350:	9a07      	ldr	r2, [sp, #28]
 8007352:	4654      	mov	r4, sl
 8007354:	2000      	movs	r0, #0
 8007356:	f04f 0c0a 	mov.w	ip, #10
 800735a:	4621      	mov	r1, r4
 800735c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007360:	3b30      	subs	r3, #48	@ 0x30
 8007362:	2b09      	cmp	r3, #9
 8007364:	d94b      	bls.n	80073fe <_vfiprintf_r+0x1a2>
 8007366:	b1b0      	cbz	r0, 8007396 <_vfiprintf_r+0x13a>
 8007368:	9207      	str	r2, [sp, #28]
 800736a:	e014      	b.n	8007396 <_vfiprintf_r+0x13a>
 800736c:	eba0 0308 	sub.w	r3, r0, r8
 8007370:	fa09 f303 	lsl.w	r3, r9, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	46a2      	mov	sl, r4
 800737a:	e7d2      	b.n	8007322 <_vfiprintf_r+0xc6>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	1d19      	adds	r1, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	9103      	str	r1, [sp, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfbb      	ittet	lt
 8007388:	425b      	neglt	r3, r3
 800738a:	f042 0202 	orrlt.w	r2, r2, #2
 800738e:	9307      	strge	r3, [sp, #28]
 8007390:	9307      	strlt	r3, [sp, #28]
 8007392:	bfb8      	it	lt
 8007394:	9204      	strlt	r2, [sp, #16]
 8007396:	7823      	ldrb	r3, [r4, #0]
 8007398:	2b2e      	cmp	r3, #46	@ 0x2e
 800739a:	d10a      	bne.n	80073b2 <_vfiprintf_r+0x156>
 800739c:	7863      	ldrb	r3, [r4, #1]
 800739e:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a0:	d132      	bne.n	8007408 <_vfiprintf_r+0x1ac>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	9203      	str	r2, [sp, #12]
 80073aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073ae:	3402      	adds	r4, #2
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007488 <_vfiprintf_r+0x22c>
 80073b6:	7821      	ldrb	r1, [r4, #0]
 80073b8:	2203      	movs	r2, #3
 80073ba:	4650      	mov	r0, sl
 80073bc:	f7f8 ff08 	bl	80001d0 <memchr>
 80073c0:	b138      	cbz	r0, 80073d2 <_vfiprintf_r+0x176>
 80073c2:	9b04      	ldr	r3, [sp, #16]
 80073c4:	eba0 000a 	sub.w	r0, r0, sl
 80073c8:	2240      	movs	r2, #64	@ 0x40
 80073ca:	4082      	lsls	r2, r0
 80073cc:	4313      	orrs	r3, r2
 80073ce:	3401      	adds	r4, #1
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d6:	4829      	ldr	r0, [pc, #164]	@ (800747c <_vfiprintf_r+0x220>)
 80073d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073dc:	2206      	movs	r2, #6
 80073de:	f7f8 fef7 	bl	80001d0 <memchr>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d03f      	beq.n	8007466 <_vfiprintf_r+0x20a>
 80073e6:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <_vfiprintf_r+0x224>)
 80073e8:	bb1b      	cbnz	r3, 8007432 <_vfiprintf_r+0x1d6>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	3307      	adds	r3, #7
 80073ee:	f023 0307 	bic.w	r3, r3, #7
 80073f2:	3308      	adds	r3, #8
 80073f4:	9303      	str	r3, [sp, #12]
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	443b      	add	r3, r7
 80073fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fc:	e76a      	b.n	80072d4 <_vfiprintf_r+0x78>
 80073fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007402:	460c      	mov	r4, r1
 8007404:	2001      	movs	r0, #1
 8007406:	e7a8      	b.n	800735a <_vfiprintf_r+0xfe>
 8007408:	2300      	movs	r3, #0
 800740a:	3401      	adds	r4, #1
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	4619      	mov	r1, r3
 8007410:	f04f 0c0a 	mov.w	ip, #10
 8007414:	4620      	mov	r0, r4
 8007416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800741a:	3a30      	subs	r2, #48	@ 0x30
 800741c:	2a09      	cmp	r2, #9
 800741e:	d903      	bls.n	8007428 <_vfiprintf_r+0x1cc>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0c6      	beq.n	80073b2 <_vfiprintf_r+0x156>
 8007424:	9105      	str	r1, [sp, #20]
 8007426:	e7c4      	b.n	80073b2 <_vfiprintf_r+0x156>
 8007428:	fb0c 2101 	mla	r1, ip, r1, r2
 800742c:	4604      	mov	r4, r0
 800742e:	2301      	movs	r3, #1
 8007430:	e7f0      	b.n	8007414 <_vfiprintf_r+0x1b8>
 8007432:	ab03      	add	r3, sp, #12
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	462a      	mov	r2, r5
 8007438:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <_vfiprintf_r+0x228>)
 800743a:	a904      	add	r1, sp, #16
 800743c:	4630      	mov	r0, r6
 800743e:	f3af 8000 	nop.w
 8007442:	4607      	mov	r7, r0
 8007444:	1c78      	adds	r0, r7, #1
 8007446:	d1d6      	bne.n	80073f6 <_vfiprintf_r+0x19a>
 8007448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d405      	bmi.n	800745a <_vfiprintf_r+0x1fe>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	059a      	lsls	r2, r3, #22
 8007452:	d402      	bmi.n	800745a <_vfiprintf_r+0x1fe>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7ff fc77 	bl	8006d48 <__retarget_lock_release_recursive>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	065b      	lsls	r3, r3, #25
 800745e:	f53f af1f 	bmi.w	80072a0 <_vfiprintf_r+0x44>
 8007462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007464:	e71e      	b.n	80072a4 <_vfiprintf_r+0x48>
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	462a      	mov	r2, r5
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <_vfiprintf_r+0x228>)
 800746e:	a904      	add	r1, sp, #16
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f879 	bl	8007568 <_printf_i>
 8007476:	e7e4      	b.n	8007442 <_vfiprintf_r+0x1e6>
 8007478:	08007da5 	.word	0x08007da5
 800747c:	08007daf 	.word	0x08007daf
 8007480:	00000000 	.word	0x00000000
 8007484:	08007237 	.word	0x08007237
 8007488:	08007dab 	.word	0x08007dab

0800748c <_printf_common>:
 800748c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007490:	4616      	mov	r6, r2
 8007492:	4698      	mov	r8, r3
 8007494:	688a      	ldr	r2, [r1, #8]
 8007496:	690b      	ldr	r3, [r1, #16]
 8007498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800749c:	4293      	cmp	r3, r2
 800749e:	bfb8      	it	lt
 80074a0:	4613      	movlt	r3, r2
 80074a2:	6033      	str	r3, [r6, #0]
 80074a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074a8:	4607      	mov	r7, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b10a      	cbz	r2, 80074b2 <_printf_common+0x26>
 80074ae:	3301      	adds	r3, #1
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	0699      	lsls	r1, r3, #26
 80074b6:	bf42      	ittt	mi
 80074b8:	6833      	ldrmi	r3, [r6, #0]
 80074ba:	3302      	addmi	r3, #2
 80074bc:	6033      	strmi	r3, [r6, #0]
 80074be:	6825      	ldr	r5, [r4, #0]
 80074c0:	f015 0506 	ands.w	r5, r5, #6
 80074c4:	d106      	bne.n	80074d4 <_printf_common+0x48>
 80074c6:	f104 0a19 	add.w	sl, r4, #25
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	6832      	ldr	r2, [r6, #0]
 80074ce:	1a9b      	subs	r3, r3, r2
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	dc26      	bgt.n	8007522 <_printf_common+0x96>
 80074d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	3b00      	subs	r3, #0
 80074dc:	bf18      	it	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	0692      	lsls	r2, r2, #26
 80074e2:	d42b      	bmi.n	800753c <_printf_common+0xb0>
 80074e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074e8:	4641      	mov	r1, r8
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c8      	blx	r9
 80074ee:	3001      	adds	r0, #1
 80074f0:	d01e      	beq.n	8007530 <_printf_common+0xa4>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	6922      	ldr	r2, [r4, #16]
 80074f6:	f003 0306 	and.w	r3, r3, #6
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	bf02      	ittt	eq
 80074fe:	68e5      	ldreq	r5, [r4, #12]
 8007500:	6833      	ldreq	r3, [r6, #0]
 8007502:	1aed      	subeq	r5, r5, r3
 8007504:	68a3      	ldr	r3, [r4, #8]
 8007506:	bf0c      	ite	eq
 8007508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800750c:	2500      	movne	r5, #0
 800750e:	4293      	cmp	r3, r2
 8007510:	bfc4      	itt	gt
 8007512:	1a9b      	subgt	r3, r3, r2
 8007514:	18ed      	addgt	r5, r5, r3
 8007516:	2600      	movs	r6, #0
 8007518:	341a      	adds	r4, #26
 800751a:	42b5      	cmp	r5, r6
 800751c:	d11a      	bne.n	8007554 <_printf_common+0xc8>
 800751e:	2000      	movs	r0, #0
 8007520:	e008      	b.n	8007534 <_printf_common+0xa8>
 8007522:	2301      	movs	r3, #1
 8007524:	4652      	mov	r2, sl
 8007526:	4641      	mov	r1, r8
 8007528:	4638      	mov	r0, r7
 800752a:	47c8      	blx	r9
 800752c:	3001      	adds	r0, #1
 800752e:	d103      	bne.n	8007538 <_printf_common+0xac>
 8007530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	3501      	adds	r5, #1
 800753a:	e7c6      	b.n	80074ca <_printf_common+0x3e>
 800753c:	18e1      	adds	r1, r4, r3
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	2030      	movs	r0, #48	@ 0x30
 8007542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007546:	4422      	add	r2, r4
 8007548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800754c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007550:	3302      	adds	r3, #2
 8007552:	e7c7      	b.n	80074e4 <_printf_common+0x58>
 8007554:	2301      	movs	r3, #1
 8007556:	4622      	mov	r2, r4
 8007558:	4641      	mov	r1, r8
 800755a:	4638      	mov	r0, r7
 800755c:	47c8      	blx	r9
 800755e:	3001      	adds	r0, #1
 8007560:	d0e6      	beq.n	8007530 <_printf_common+0xa4>
 8007562:	3601      	adds	r6, #1
 8007564:	e7d9      	b.n	800751a <_printf_common+0x8e>
	...

08007568 <_printf_i>:
 8007568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	7e0f      	ldrb	r7, [r1, #24]
 800756e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007570:	2f78      	cmp	r7, #120	@ 0x78
 8007572:	4691      	mov	r9, r2
 8007574:	4680      	mov	r8, r0
 8007576:	460c      	mov	r4, r1
 8007578:	469a      	mov	sl, r3
 800757a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800757e:	d807      	bhi.n	8007590 <_printf_i+0x28>
 8007580:	2f62      	cmp	r7, #98	@ 0x62
 8007582:	d80a      	bhi.n	800759a <_printf_i+0x32>
 8007584:	2f00      	cmp	r7, #0
 8007586:	f000 80d2 	beq.w	800772e <_printf_i+0x1c6>
 800758a:	2f58      	cmp	r7, #88	@ 0x58
 800758c:	f000 80b9 	beq.w	8007702 <_printf_i+0x19a>
 8007590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007598:	e03a      	b.n	8007610 <_printf_i+0xa8>
 800759a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800759e:	2b15      	cmp	r3, #21
 80075a0:	d8f6      	bhi.n	8007590 <_printf_i+0x28>
 80075a2:	a101      	add	r1, pc, #4	@ (adr r1, 80075a8 <_printf_i+0x40>)
 80075a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075a8:	08007601 	.word	0x08007601
 80075ac:	08007615 	.word	0x08007615
 80075b0:	08007591 	.word	0x08007591
 80075b4:	08007591 	.word	0x08007591
 80075b8:	08007591 	.word	0x08007591
 80075bc:	08007591 	.word	0x08007591
 80075c0:	08007615 	.word	0x08007615
 80075c4:	08007591 	.word	0x08007591
 80075c8:	08007591 	.word	0x08007591
 80075cc:	08007591 	.word	0x08007591
 80075d0:	08007591 	.word	0x08007591
 80075d4:	08007715 	.word	0x08007715
 80075d8:	0800763f 	.word	0x0800763f
 80075dc:	080076cf 	.word	0x080076cf
 80075e0:	08007591 	.word	0x08007591
 80075e4:	08007591 	.word	0x08007591
 80075e8:	08007737 	.word	0x08007737
 80075ec:	08007591 	.word	0x08007591
 80075f0:	0800763f 	.word	0x0800763f
 80075f4:	08007591 	.word	0x08007591
 80075f8:	08007591 	.word	0x08007591
 80075fc:	080076d7 	.word	0x080076d7
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6032      	str	r2, [r6, #0]
 8007608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800760c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007610:	2301      	movs	r3, #1
 8007612:	e09d      	b.n	8007750 <_printf_i+0x1e8>
 8007614:	6833      	ldr	r3, [r6, #0]
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	1d19      	adds	r1, r3, #4
 800761a:	6031      	str	r1, [r6, #0]
 800761c:	0606      	lsls	r6, r0, #24
 800761e:	d501      	bpl.n	8007624 <_printf_i+0xbc>
 8007620:	681d      	ldr	r5, [r3, #0]
 8007622:	e003      	b.n	800762c <_printf_i+0xc4>
 8007624:	0645      	lsls	r5, r0, #25
 8007626:	d5fb      	bpl.n	8007620 <_printf_i+0xb8>
 8007628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800762c:	2d00      	cmp	r5, #0
 800762e:	da03      	bge.n	8007638 <_printf_i+0xd0>
 8007630:	232d      	movs	r3, #45	@ 0x2d
 8007632:	426d      	negs	r5, r5
 8007634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007638:	4859      	ldr	r0, [pc, #356]	@ (80077a0 <_printf_i+0x238>)
 800763a:	230a      	movs	r3, #10
 800763c:	e011      	b.n	8007662 <_printf_i+0xfa>
 800763e:	6821      	ldr	r1, [r4, #0]
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	0608      	lsls	r0, r1, #24
 8007644:	f853 5b04 	ldr.w	r5, [r3], #4
 8007648:	d402      	bmi.n	8007650 <_printf_i+0xe8>
 800764a:	0649      	lsls	r1, r1, #25
 800764c:	bf48      	it	mi
 800764e:	b2ad      	uxthmi	r5, r5
 8007650:	2f6f      	cmp	r7, #111	@ 0x6f
 8007652:	4853      	ldr	r0, [pc, #332]	@ (80077a0 <_printf_i+0x238>)
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	bf14      	ite	ne
 8007658:	230a      	movne	r3, #10
 800765a:	2308      	moveq	r3, #8
 800765c:	2100      	movs	r1, #0
 800765e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007662:	6866      	ldr	r6, [r4, #4]
 8007664:	60a6      	str	r6, [r4, #8]
 8007666:	2e00      	cmp	r6, #0
 8007668:	bfa2      	ittt	ge
 800766a:	6821      	ldrge	r1, [r4, #0]
 800766c:	f021 0104 	bicge.w	r1, r1, #4
 8007670:	6021      	strge	r1, [r4, #0]
 8007672:	b90d      	cbnz	r5, 8007678 <_printf_i+0x110>
 8007674:	2e00      	cmp	r6, #0
 8007676:	d04b      	beq.n	8007710 <_printf_i+0x1a8>
 8007678:	4616      	mov	r6, r2
 800767a:	fbb5 f1f3 	udiv	r1, r5, r3
 800767e:	fb03 5711 	mls	r7, r3, r1, r5
 8007682:	5dc7      	ldrb	r7, [r0, r7]
 8007684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007688:	462f      	mov	r7, r5
 800768a:	42bb      	cmp	r3, r7
 800768c:	460d      	mov	r5, r1
 800768e:	d9f4      	bls.n	800767a <_printf_i+0x112>
 8007690:	2b08      	cmp	r3, #8
 8007692:	d10b      	bne.n	80076ac <_printf_i+0x144>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07df      	lsls	r7, r3, #31
 8007698:	d508      	bpl.n	80076ac <_printf_i+0x144>
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	6861      	ldr	r1, [r4, #4]
 800769e:	4299      	cmp	r1, r3
 80076a0:	bfde      	ittt	le
 80076a2:	2330      	movle	r3, #48	@ 0x30
 80076a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076ac:	1b92      	subs	r2, r2, r6
 80076ae:	6122      	str	r2, [r4, #16]
 80076b0:	f8cd a000 	str.w	sl, [sp]
 80076b4:	464b      	mov	r3, r9
 80076b6:	aa03      	add	r2, sp, #12
 80076b8:	4621      	mov	r1, r4
 80076ba:	4640      	mov	r0, r8
 80076bc:	f7ff fee6 	bl	800748c <_printf_common>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d14a      	bne.n	800775a <_printf_i+0x1f2>
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076c8:	b004      	add	sp, #16
 80076ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	f043 0320 	orr.w	r3, r3, #32
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	4833      	ldr	r0, [pc, #204]	@ (80077a4 <_printf_i+0x23c>)
 80076d8:	2778      	movs	r7, #120	@ 0x78
 80076da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6831      	ldr	r1, [r6, #0]
 80076e2:	061f      	lsls	r7, r3, #24
 80076e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80076e8:	d402      	bmi.n	80076f0 <_printf_i+0x188>
 80076ea:	065f      	lsls	r7, r3, #25
 80076ec:	bf48      	it	mi
 80076ee:	b2ad      	uxthmi	r5, r5
 80076f0:	6031      	str	r1, [r6, #0]
 80076f2:	07d9      	lsls	r1, r3, #31
 80076f4:	bf44      	itt	mi
 80076f6:	f043 0320 	orrmi.w	r3, r3, #32
 80076fa:	6023      	strmi	r3, [r4, #0]
 80076fc:	b11d      	cbz	r5, 8007706 <_printf_i+0x19e>
 80076fe:	2310      	movs	r3, #16
 8007700:	e7ac      	b.n	800765c <_printf_i+0xf4>
 8007702:	4827      	ldr	r0, [pc, #156]	@ (80077a0 <_printf_i+0x238>)
 8007704:	e7e9      	b.n	80076da <_printf_i+0x172>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f023 0320 	bic.w	r3, r3, #32
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	e7f6      	b.n	80076fe <_printf_i+0x196>
 8007710:	4616      	mov	r6, r2
 8007712:	e7bd      	b.n	8007690 <_printf_i+0x128>
 8007714:	6833      	ldr	r3, [r6, #0]
 8007716:	6825      	ldr	r5, [r4, #0]
 8007718:	6961      	ldr	r1, [r4, #20]
 800771a:	1d18      	adds	r0, r3, #4
 800771c:	6030      	str	r0, [r6, #0]
 800771e:	062e      	lsls	r6, r5, #24
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	d501      	bpl.n	8007728 <_printf_i+0x1c0>
 8007724:	6019      	str	r1, [r3, #0]
 8007726:	e002      	b.n	800772e <_printf_i+0x1c6>
 8007728:	0668      	lsls	r0, r5, #25
 800772a:	d5fb      	bpl.n	8007724 <_printf_i+0x1bc>
 800772c:	8019      	strh	r1, [r3, #0]
 800772e:	2300      	movs	r3, #0
 8007730:	6123      	str	r3, [r4, #16]
 8007732:	4616      	mov	r6, r2
 8007734:	e7bc      	b.n	80076b0 <_printf_i+0x148>
 8007736:	6833      	ldr	r3, [r6, #0]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	6032      	str	r2, [r6, #0]
 800773c:	681e      	ldr	r6, [r3, #0]
 800773e:	6862      	ldr	r2, [r4, #4]
 8007740:	2100      	movs	r1, #0
 8007742:	4630      	mov	r0, r6
 8007744:	f7f8 fd44 	bl	80001d0 <memchr>
 8007748:	b108      	cbz	r0, 800774e <_printf_i+0x1e6>
 800774a:	1b80      	subs	r0, r0, r6
 800774c:	6060      	str	r0, [r4, #4]
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	2300      	movs	r3, #0
 8007754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007758:	e7aa      	b.n	80076b0 <_printf_i+0x148>
 800775a:	6923      	ldr	r3, [r4, #16]
 800775c:	4632      	mov	r2, r6
 800775e:	4649      	mov	r1, r9
 8007760:	4640      	mov	r0, r8
 8007762:	47d0      	blx	sl
 8007764:	3001      	adds	r0, #1
 8007766:	d0ad      	beq.n	80076c4 <_printf_i+0x15c>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	079b      	lsls	r3, r3, #30
 800776c:	d413      	bmi.n	8007796 <_printf_i+0x22e>
 800776e:	68e0      	ldr	r0, [r4, #12]
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	4298      	cmp	r0, r3
 8007774:	bfb8      	it	lt
 8007776:	4618      	movlt	r0, r3
 8007778:	e7a6      	b.n	80076c8 <_printf_i+0x160>
 800777a:	2301      	movs	r3, #1
 800777c:	4632      	mov	r2, r6
 800777e:	4649      	mov	r1, r9
 8007780:	4640      	mov	r0, r8
 8007782:	47d0      	blx	sl
 8007784:	3001      	adds	r0, #1
 8007786:	d09d      	beq.n	80076c4 <_printf_i+0x15c>
 8007788:	3501      	adds	r5, #1
 800778a:	68e3      	ldr	r3, [r4, #12]
 800778c:	9903      	ldr	r1, [sp, #12]
 800778e:	1a5b      	subs	r3, r3, r1
 8007790:	42ab      	cmp	r3, r5
 8007792:	dcf2      	bgt.n	800777a <_printf_i+0x212>
 8007794:	e7eb      	b.n	800776e <_printf_i+0x206>
 8007796:	2500      	movs	r5, #0
 8007798:	f104 0619 	add.w	r6, r4, #25
 800779c:	e7f5      	b.n	800778a <_printf_i+0x222>
 800779e:	bf00      	nop
 80077a0:	08007db6 	.word	0x08007db6
 80077a4:	08007dc7 	.word	0x08007dc7

080077a8 <__sflush_r>:
 80077a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b0:	0716      	lsls	r6, r2, #28
 80077b2:	4605      	mov	r5, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	d454      	bmi.n	8007862 <__sflush_r+0xba>
 80077b8:	684b      	ldr	r3, [r1, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dc02      	bgt.n	80077c4 <__sflush_r+0x1c>
 80077be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dd48      	ble.n	8007856 <__sflush_r+0xae>
 80077c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	d045      	beq.n	8007856 <__sflush_r+0xae>
 80077ca:	2300      	movs	r3, #0
 80077cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077d0:	682f      	ldr	r7, [r5, #0]
 80077d2:	6a21      	ldr	r1, [r4, #32]
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	d030      	beq.n	800783a <__sflush_r+0x92>
 80077d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	0759      	lsls	r1, r3, #29
 80077de:	d505      	bpl.n	80077ec <__sflush_r+0x44>
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	1ad2      	subs	r2, r2, r3
 80077e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077e6:	b10b      	cbz	r3, 80077ec <__sflush_r+0x44>
 80077e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	2300      	movs	r3, #0
 80077ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077f0:	6a21      	ldr	r1, [r4, #32]
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b0      	blx	r6
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	d106      	bne.n	800780a <__sflush_r+0x62>
 80077fc:	6829      	ldr	r1, [r5, #0]
 80077fe:	291d      	cmp	r1, #29
 8007800:	d82b      	bhi.n	800785a <__sflush_r+0xb2>
 8007802:	4a2a      	ldr	r2, [pc, #168]	@ (80078ac <__sflush_r+0x104>)
 8007804:	410a      	asrs	r2, r1
 8007806:	07d6      	lsls	r6, r2, #31
 8007808:	d427      	bmi.n	800785a <__sflush_r+0xb2>
 800780a:	2200      	movs	r2, #0
 800780c:	6062      	str	r2, [r4, #4]
 800780e:	04d9      	lsls	r1, r3, #19
 8007810:	6922      	ldr	r2, [r4, #16]
 8007812:	6022      	str	r2, [r4, #0]
 8007814:	d504      	bpl.n	8007820 <__sflush_r+0x78>
 8007816:	1c42      	adds	r2, r0, #1
 8007818:	d101      	bne.n	800781e <__sflush_r+0x76>
 800781a:	682b      	ldr	r3, [r5, #0]
 800781c:	b903      	cbnz	r3, 8007820 <__sflush_r+0x78>
 800781e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007822:	602f      	str	r7, [r5, #0]
 8007824:	b1b9      	cbz	r1, 8007856 <__sflush_r+0xae>
 8007826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800782a:	4299      	cmp	r1, r3
 800782c:	d002      	beq.n	8007834 <__sflush_r+0x8c>
 800782e:	4628      	mov	r0, r5
 8007830:	f7ff fa9a 	bl	8006d68 <_free_r>
 8007834:	2300      	movs	r3, #0
 8007836:	6363      	str	r3, [r4, #52]	@ 0x34
 8007838:	e00d      	b.n	8007856 <__sflush_r+0xae>
 800783a:	2301      	movs	r3, #1
 800783c:	4628      	mov	r0, r5
 800783e:	47b0      	blx	r6
 8007840:	4602      	mov	r2, r0
 8007842:	1c50      	adds	r0, r2, #1
 8007844:	d1c9      	bne.n	80077da <__sflush_r+0x32>
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0c6      	beq.n	80077da <__sflush_r+0x32>
 800784c:	2b1d      	cmp	r3, #29
 800784e:	d001      	beq.n	8007854 <__sflush_r+0xac>
 8007850:	2b16      	cmp	r3, #22
 8007852:	d11e      	bne.n	8007892 <__sflush_r+0xea>
 8007854:	602f      	str	r7, [r5, #0]
 8007856:	2000      	movs	r0, #0
 8007858:	e022      	b.n	80078a0 <__sflush_r+0xf8>
 800785a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785e:	b21b      	sxth	r3, r3
 8007860:	e01b      	b.n	800789a <__sflush_r+0xf2>
 8007862:	690f      	ldr	r7, [r1, #16]
 8007864:	2f00      	cmp	r7, #0
 8007866:	d0f6      	beq.n	8007856 <__sflush_r+0xae>
 8007868:	0793      	lsls	r3, r2, #30
 800786a:	680e      	ldr	r6, [r1, #0]
 800786c:	bf08      	it	eq
 800786e:	694b      	ldreq	r3, [r1, #20]
 8007870:	600f      	str	r7, [r1, #0]
 8007872:	bf18      	it	ne
 8007874:	2300      	movne	r3, #0
 8007876:	eba6 0807 	sub.w	r8, r6, r7
 800787a:	608b      	str	r3, [r1, #8]
 800787c:	f1b8 0f00 	cmp.w	r8, #0
 8007880:	dde9      	ble.n	8007856 <__sflush_r+0xae>
 8007882:	6a21      	ldr	r1, [r4, #32]
 8007884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007886:	4643      	mov	r3, r8
 8007888:	463a      	mov	r2, r7
 800788a:	4628      	mov	r0, r5
 800788c:	47b0      	blx	r6
 800788e:	2800      	cmp	r0, #0
 8007890:	dc08      	bgt.n	80078a4 <__sflush_r+0xfc>
 8007892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a4:	4407      	add	r7, r0
 80078a6:	eba8 0800 	sub.w	r8, r8, r0
 80078aa:	e7e7      	b.n	800787c <__sflush_r+0xd4>
 80078ac:	dfbffffe 	.word	0xdfbffffe

080078b0 <_fflush_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	690b      	ldr	r3, [r1, #16]
 80078b4:	4605      	mov	r5, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	b913      	cbnz	r3, 80078c0 <_fflush_r+0x10>
 80078ba:	2500      	movs	r5, #0
 80078bc:	4628      	mov	r0, r5
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	b118      	cbz	r0, 80078ca <_fflush_r+0x1a>
 80078c2:	6a03      	ldr	r3, [r0, #32]
 80078c4:	b90b      	cbnz	r3, 80078ca <_fflush_r+0x1a>
 80078c6:	f7ff f813 	bl	80068f0 <__sinit>
 80078ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f3      	beq.n	80078ba <_fflush_r+0xa>
 80078d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078d4:	07d0      	lsls	r0, r2, #31
 80078d6:	d404      	bmi.n	80078e2 <_fflush_r+0x32>
 80078d8:	0599      	lsls	r1, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_fflush_r+0x32>
 80078dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078de:	f7ff fa32 	bl	8006d46 <__retarget_lock_acquire_recursive>
 80078e2:	4628      	mov	r0, r5
 80078e4:	4621      	mov	r1, r4
 80078e6:	f7ff ff5f 	bl	80077a8 <__sflush_r>
 80078ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078ec:	07da      	lsls	r2, r3, #31
 80078ee:	4605      	mov	r5, r0
 80078f0:	d4e4      	bmi.n	80078bc <_fflush_r+0xc>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	059b      	lsls	r3, r3, #22
 80078f6:	d4e1      	bmi.n	80078bc <_fflush_r+0xc>
 80078f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fa:	f7ff fa25 	bl	8006d48 <__retarget_lock_release_recursive>
 80078fe:	e7dd      	b.n	80078bc <_fflush_r+0xc>

08007900 <__swhatbuf_r>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	460c      	mov	r4, r1
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	2900      	cmp	r1, #0
 800790a:	b096      	sub	sp, #88	@ 0x58
 800790c:	4615      	mov	r5, r2
 800790e:	461e      	mov	r6, r3
 8007910:	da0d      	bge.n	800792e <__swhatbuf_r+0x2e>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	bf14      	ite	ne
 800791e:	2340      	movne	r3, #64	@ 0x40
 8007920:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007924:	2000      	movs	r0, #0
 8007926:	6031      	str	r1, [r6, #0]
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	b016      	add	sp, #88	@ 0x58
 800792c:	bd70      	pop	{r4, r5, r6, pc}
 800792e:	466a      	mov	r2, sp
 8007930:	f000 f862 	bl	80079f8 <_fstat_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	dbec      	blt.n	8007912 <__swhatbuf_r+0x12>
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800793e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007942:	4259      	negs	r1, r3
 8007944:	4159      	adcs	r1, r3
 8007946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800794a:	e7eb      	b.n	8007924 <__swhatbuf_r+0x24>

0800794c <__smakebuf_r>:
 800794c:	898b      	ldrh	r3, [r1, #12]
 800794e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007950:	079d      	lsls	r5, r3, #30
 8007952:	4606      	mov	r6, r0
 8007954:	460c      	mov	r4, r1
 8007956:	d507      	bpl.n	8007968 <__smakebuf_r+0x1c>
 8007958:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	6123      	str	r3, [r4, #16]
 8007960:	2301      	movs	r3, #1
 8007962:	6163      	str	r3, [r4, #20]
 8007964:	b003      	add	sp, #12
 8007966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007968:	ab01      	add	r3, sp, #4
 800796a:	466a      	mov	r2, sp
 800796c:	f7ff ffc8 	bl	8007900 <__swhatbuf_r>
 8007970:	9f00      	ldr	r7, [sp, #0]
 8007972:	4605      	mov	r5, r0
 8007974:	4639      	mov	r1, r7
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff fa62 	bl	8006e40 <_malloc_r>
 800797c:	b948      	cbnz	r0, 8007992 <__smakebuf_r+0x46>
 800797e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007982:	059a      	lsls	r2, r3, #22
 8007984:	d4ee      	bmi.n	8007964 <__smakebuf_r+0x18>
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	f043 0302 	orr.w	r3, r3, #2
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	e7e2      	b.n	8007958 <__smakebuf_r+0xc>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	6020      	str	r0, [r4, #0]
 8007996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079a2:	b15b      	cbz	r3, 80079bc <__smakebuf_r+0x70>
 80079a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f837 	bl	8007a1c <_isatty_r>
 80079ae:	b128      	cbz	r0, 80079bc <__smakebuf_r+0x70>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	431d      	orrs	r5, r3
 80079c0:	81a5      	strh	r5, [r4, #12]
 80079c2:	e7cf      	b.n	8007964 <__smakebuf_r+0x18>

080079c4 <memmove>:
 80079c4:	4288      	cmp	r0, r1
 80079c6:	b510      	push	{r4, lr}
 80079c8:	eb01 0402 	add.w	r4, r1, r2
 80079cc:	d902      	bls.n	80079d4 <memmove+0x10>
 80079ce:	4284      	cmp	r4, r0
 80079d0:	4623      	mov	r3, r4
 80079d2:	d807      	bhi.n	80079e4 <memmove+0x20>
 80079d4:	1e43      	subs	r3, r0, #1
 80079d6:	42a1      	cmp	r1, r4
 80079d8:	d008      	beq.n	80079ec <memmove+0x28>
 80079da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079e2:	e7f8      	b.n	80079d6 <memmove+0x12>
 80079e4:	4402      	add	r2, r0
 80079e6:	4601      	mov	r1, r0
 80079e8:	428a      	cmp	r2, r1
 80079ea:	d100      	bne.n	80079ee <memmove+0x2a>
 80079ec:	bd10      	pop	{r4, pc}
 80079ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079f6:	e7f7      	b.n	80079e8 <memmove+0x24>

080079f8 <_fstat_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	@ (8007a18 <_fstat_r+0x20>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	f7f9 f81c 	bl	8000a42 <_fstat>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	d102      	bne.n	8007a14 <_fstat_r+0x1c>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b103      	cbz	r3, 8007a14 <_fstat_r+0x1c>
 8007a12:	6023      	str	r3, [r4, #0]
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	200015a4 	.word	0x200015a4

08007a1c <_isatty_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d06      	ldr	r5, [pc, #24]	@ (8007a38 <_isatty_r+0x1c>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7f9 f81b 	bl	8000a62 <_isatty>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_isatty_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_isatty_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200015a4 	.word	0x200015a4

08007a3c <_sbrk_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d06      	ldr	r5, [pc, #24]	@ (8007a58 <_sbrk_r+0x1c>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	f7f9 f824 	bl	8000a94 <_sbrk>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_sbrk_r+0x1a>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_sbrk_r+0x1a>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	200015a4 	.word	0x200015a4

08007a5c <_realloc_r>:
 8007a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a60:	4680      	mov	r8, r0
 8007a62:	4615      	mov	r5, r2
 8007a64:	460c      	mov	r4, r1
 8007a66:	b921      	cbnz	r1, 8007a72 <_realloc_r+0x16>
 8007a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	f7ff b9e7 	b.w	8006e40 <_malloc_r>
 8007a72:	b92a      	cbnz	r2, 8007a80 <_realloc_r+0x24>
 8007a74:	f7ff f978 	bl	8006d68 <_free_r>
 8007a78:	2400      	movs	r4, #0
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	f000 f81a 	bl	8007ab8 <_malloc_usable_size_r>
 8007a84:	4285      	cmp	r5, r0
 8007a86:	4606      	mov	r6, r0
 8007a88:	d802      	bhi.n	8007a90 <_realloc_r+0x34>
 8007a8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a8e:	d8f4      	bhi.n	8007a7a <_realloc_r+0x1e>
 8007a90:	4629      	mov	r1, r5
 8007a92:	4640      	mov	r0, r8
 8007a94:	f7ff f9d4 	bl	8006e40 <_malloc_r>
 8007a98:	4607      	mov	r7, r0
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0ec      	beq.n	8007a78 <_realloc_r+0x1c>
 8007a9e:	42b5      	cmp	r5, r6
 8007aa0:	462a      	mov	r2, r5
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	bf28      	it	cs
 8007aa6:	4632      	movcs	r2, r6
 8007aa8:	f7ff f94f 	bl	8006d4a <memcpy>
 8007aac:	4621      	mov	r1, r4
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f7ff f95a 	bl	8006d68 <_free_r>
 8007ab4:	463c      	mov	r4, r7
 8007ab6:	e7e0      	b.n	8007a7a <_realloc_r+0x1e>

08007ab8 <_malloc_usable_size_r>:
 8007ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007abc:	1f18      	subs	r0, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfbc      	itt	lt
 8007ac2:	580b      	ldrlt	r3, [r1, r0]
 8007ac4:	18c0      	addlt	r0, r0, r3
 8007ac6:	4770      	bx	lr

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
